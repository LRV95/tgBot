# services/ai/recommendation.py
import logging
from typing import List, Dict, Any
from .base import AIAgent
from .gigachat_llm import GigaChatLLM
from .memory_store import MemoryStore
from .shared_embeddings import SharedEmbeddings

logger = logging.getLogger(__name__)


class RecommendationAgent(AIAgent):
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞.
    """

    def __init__(self):
        super().__init__(name="RecommendationAgent", autonomy_level=2)
        self.llm = GigaChatLLM(temperature=0.7)
        self.memory_store = MemoryStore()
        self.embeddings = SharedEmbeddings()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.register_tool(
            "semantic_event_search",
            self._semantic_event_search,
            "–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º embeddings"
        )

        self.register_tool(
            "extract_interests",
            self._extract_interests_from_query,
            "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )

        self.register_tool(
            "extract_profession",
            self._extract_profession_from_query,
            "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )

    def _semantic_event_search(self, query: str, k: int = 5) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º embeddings
        
        Args:
            query: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        """
        try:
            results = self.embeddings.search_events(query, k)
            return results
        except Exception as e:
            logger.error(f"Error in semantic event search: {e}")
            return []

    def _extract_interests_from_query(self, query: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        """
        try:
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∏ –∏–∑ –Ω–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.
            –ó–∞–ø—Ä–æ—Å: {query}
            
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {{
                "interests": ["–∏–Ω—Ç–µ—Ä–µ—Å1", "–∏–Ω—Ç–µ—Ä–µ—Å2", ...]
            }}
            """
            
            response = self.llm.generate(prompt)
            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            import json
            result = json.loads(response)
            return result.get("interests", [])
            
        except Exception as e:
            logger.error(f"Error extracting interests: {e}")
            return []

    def _extract_profession_from_query(self, query: str) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∏ –∏–∑ –Ω–µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é.
            –ó–∞–ø—Ä–æ—Å: {query}
            
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {{
                "profession": "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è"
            }}
            """
            
            response = self.llm.generate(prompt)
            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            import json
            result = json.loads(response)
            return result.get("profession", "")
            
        except Exception as e:
            logger.error(f"Error extracting profession: {e}")
            return ""

    def reason(self, query: str, context: Dict = None) -> List[str]:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
        """
        reasoning_steps = []
        
        # 1. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        reasoning_steps.append(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}")
        
        # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        reasoning_steps.append("–ò–∑–≤–ª–µ–∫–∞—é –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞")
        interests = self._extract_interests_from_query(query)
        if interests:
            reasoning_steps.append(f"–ù–∞–π–¥–µ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interests)}")
        
        # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        reasoning_steps.append("–ò–∑–≤–ª–µ–∫–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–∑ –∑–∞–ø—Ä–æ—Å–∞")
        profession = self._extract_profession_from_query(query)
        if profession:
            reasoning_steps.append(f"–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}")
        
        # 4. –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        reasoning_steps.append("–í—ã–ø–æ–ª–Ω—è—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        events = self._semantic_event_search(query)
        if events:
            reasoning_steps.append(f"–ù–∞–π–¥–µ–Ω–æ {len(events)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        else:
            reasoning_steps.append("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return reasoning_steps

    def process_query(self, query: str, **kwargs) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –û—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        try:
            # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
            interests = self._extract_interests_from_query(query)
            profession = self._extract_profession_from_query(query)
            
            # 2. –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            events = self._semantic_event_search(query, k=3)
            
            if not events:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
            
            # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = "–í–æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å:\n\n"
            
            for event in events:
                response += f"‚ú® **{event['name']}**\n"
                response += f"üìÖ –î–∞—Ç–∞: {event['date']}\n"
                response += f"üïí –í—Ä–µ–º—è: {event['time']}\n"
                response += f"üìç –ì–æ—Ä–æ–¥: {event['city']}\n"
                response += f"üè∑ –¢–µ–≥–∏: {event['tags']}\n"
                response += f"üìù {event['description']}\n\n"
            
            return response
            
        except Exception as e:
            logger.error(f"Error processing recommendation query: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."