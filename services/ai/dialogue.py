# services/ai/dialogue.py
import logging
from typing import List, Dict, Any
import json
import re
import time
import random

from .base import AIAgent
from .gigachat_llm import GigaChatLLM
from .memory_store import MemoryStore
from .bot_info import get_bot_info, get_volunteering_definition

logger = logging.getLogger(__name__)


class DialogueAgent(AIAgent):
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞.
    """

    def __init__(self):
        super().__init__(name="DialogueAgent", autonomy_level=2)
        self.llm = GigaChatLLM(temperature=0.7, max_tokens=300)
        self.memory_store = MemoryStore()

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π
        self.available_roles = {
            "consultant": "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤—É, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–æ–≤–µ—Ç—ã",
            "motivator": "–ú–æ—Ç–∏–≤–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤",
            "teacher": "–£—á–∏—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—É—á–∞–µ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–º –Ω–∞–≤—ã–∫–∞–º –∏ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º",
            "coordinator": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "mentor": "–ú–µ–Ω—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É –≤ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ"
        }

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.register_tool(
            "detect_sentiment",
            self._detect_sentiment,
            "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )

        self.register_tool(
            "identify_question_type",
            self._identify_question_type,
            "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )

        self.register_tool(
            "respond_to_gratitude",
            self._respond_to_gratitude,
            "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )

        self.register_tool(
            "get_general_info_about_volunteering",
            self._get_general_info_about_volunteering,
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ"
        )

    def _detect_sentiment(self, text: str) -> Dict:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ç–æ–Ω–µ
        """
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
        1. –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ, –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ)
        2. –û—Å–Ω–æ–≤–Ω—É—é —ç–º–æ—Ü–∏—é (—Ä–∞–¥–æ—Å—Ç—å, –≥—Ä—É—Å—Ç—å, –∑–ª–æ—Å—Ç—å, —Å—Ç—Ä–∞—Ö, —É–¥–∏–≤–ª–µ–Ω–∏–µ, –∏–Ω—Ç–µ—Ä–µ—Å –∏ —Ç.–¥.)
        3. –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ (–≤—ã—Å–æ–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –Ω–∏–∑–∫–∏–π)

        –°–æ–æ–±—â–µ–Ω–∏–µ: "{text}"

        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - —Ç–æ–ª—å–∫–æ JSON:
        {{
            "mood": "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ/–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ",
            "emotion": "–æ—Å–Ω–æ–≤–Ω–∞—è —ç–º–æ—Ü–∏—è",
            "energy_level": "–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π",
            "confidence": 0.8  // —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1
        }}
        """

        try:
            response = self.llm.generate(prompt)

            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_match = re.search(r'({.*})', response, re.DOTALL)
            if json_match:
                json_str = json_match.group(1)
                sentiment = json.loads(json_str)
                return sentiment
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return {
                    "mood": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ",
                    "emotion": "–∏–Ω—Ç–µ—Ä–µ—Å",
                    "energy_level": "—Å—Ä–µ–¥–Ω–∏–π",
                    "confidence": 0.5
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞: {e}")
            return {
                "mood": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ",
                "emotion": "–∏–Ω—Ç–µ—Ä–µ—Å",
                "energy_level": "—Å—Ä–µ–¥–Ω–∏–π",
                "confidence": 0.3
            }

    def _identify_question_type(self, text: str) -> Dict:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            text: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞

        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –≤–æ–ø—Ä–æ—Å–∞
        """
        prompt = f"""
        –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞/–∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:

        –°–æ–æ–±—â–µ–Ω–∏–µ: "{text}"

        –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã:
        - factual (–∑–∞–ø—Ä–æ—Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        - opinion (–∑–∞–ø—Ä–æ—Å –º–Ω–µ–Ω–∏—è –∏–ª–∏ —Å–æ–≤–µ—Ç–∞)
        - procedural (–∫–∞–∫ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å)
        - clarification (–∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ)
        - personal (–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å)
        - hypothetical (–≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å)
        - gratitude (–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏)
        - greeting (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)

        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - —Ç–æ–ª—å–∫–æ JSON:
        {{
            "question_type": "—Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞",
            "requires_expertise": true/false,
            "confidence": 0.8  // —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1
        }}
        """

        try:
            response = self.llm.generate(prompt)

            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_match = re.search(r'({.*})', response, re.DOTALL)
            if json_match:
                json_str = json_match.group(1)
                question_info = json.loads(json_str)
                return question_info
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return {
                    "question_type": "factual",
                    "requires_expertise": False,
                    "confidence": 0.5
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return {
                "question_type": "factual",
                "requires_expertise": False,
                "confidence": 0.3
            }

    def _respond_to_gratitude(self, history: List = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            str: –û—Ç–≤–µ—Ç –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
        """
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
        responses = [
            "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å.",
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥, —á—Ç–æ —Å–º–æ–≥ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º. –ï—Å—Ç—å –ª–∏ –µ—â–µ —á—Ç–æ-—Ç–æ, —Å —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "–ù–µ –∑–∞ —á—Ç–æ! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
            "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å.",
            "–í—Å–µ–≥–¥–∞ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –ù–∞–¥–µ—é—Å—å, –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —ç–º–æ–¥–∑–∏
        emojis = ["üòä", "üëç", "‚ú®", "üåü", "üôÇ"]

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ —ç–º–æ–¥–∑–∏
        response = random.choice(responses)
        emoji = random.choice(emojis)

        return f"{emoji} {response}"

    def _get_general_info_about_volunteering(self, query: str) -> str:
        """
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ

        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        lower_query = query.lower()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if "—á—Ç–æ —Ç–∞–∫–æ–µ" in lower_query or "—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç" in lower_query or "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ" in lower_query:
            return get_volunteering_definition()

        if "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" in lower_query or "–∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" in lower_query:
            return f"üìù **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ**\n\n{get_bot_info('registration_process')}"

        if "–∫—É—Ä–∞—Ç–æ—Ä" in lower_query or "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä" in lower_query or "–∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç" in lower_query:
            return f"üë®‚Äçüíº **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä–∞—Ç–æ—Ä–∞—Ö**\n\n{get_bot_info('curator_info')}"

        if "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ" in lower_query and ("–∑–∞–ø–∏—Å—å" in lower_query or "—Ä–µ–≥–∏—Å—Ç—Ä" in lower_query):
            return f"üéØ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è**\n\n{get_bot_info('event_registration')}"

        if "–±–∞–ª–ª" in lower_query or "–±–æ–Ω—É—Å" in lower_query or "–æ—á–∫" in lower_query:
            return f"üèÜ **–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤**\n\n{get_bot_info('points_system')}"

        if "—Ä–µ–≥–∏–æ–Ω" in lower_query or "–≥–æ—Ä–æ–¥" in lower_query or "–æ–±–ª–∞—Å—Ç—å" in lower_query:
            regions = get_bot_info('available_regions')
            regions_text = "\n".join([f"‚Ä¢ {region}" for region in regions])
            return f"üåç **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã**\n\n{regions_text}"

        if "–≤–∏–¥" in lower_query or "—Ç–∏–ø" in lower_query or "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω" in lower_query:
            types = get_bot_info('volunteering_types')
            types_text = "\n".join([f"‚Ä¢ {vtype}" for vtype in types])
            return f"üîñ **–í–∏–¥—ã –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞**\n\n{types_text}"

        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        try:
            prompt = f"""
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ:

            –í–æ–ø—Ä–æ—Å: "{query}"

            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–Ω–∞.
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º (–¥–æ 250 —Å–ª–æ–≤).

            –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ–º, –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, 
            —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å —ç—Ç–∏–º–∏ —Ç–µ–º–∞–º–∏, –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—Ç—å, —á—Ç–æ —Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è
            –Ω–∞ —Ç–µ–º–∞—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ –∏ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ.

            –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:
            - –ù–∞–∑–≤–∞–Ω–∏–µ: {get_bot_info('name')}
            - –û–ø–∏—Å–∞–Ω–∏–µ: {get_bot_info('description')}
            - –í–∏–¥—ã –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞: {', '.join(get_bot_info('volunteering_types'))}
            - –†–µ–≥–∏–æ–Ω—ã —Ä–∞–±–æ—Ç—ã: {', '.join(get_bot_info('available_regions'))}
            """

            response = self.llm.generate(prompt)
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return get_volunteering_definition()

    def reason(self, query: str, context: Dict = None) -> List[str]:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å

        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            List[str]: –¶–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
        """
        conversation_history = context.get("conversation_history", []) if context else []

        reasoning_steps = [
            f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: '{query}'",
            "–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞"
        ]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
        if "—Å–ø–∞—Å–∏–±" in query.lower() or "–±–ª–∞–≥–æ–¥–∞—Ä" in query.lower():
            reasoning_steps.append("–ó–∞–ø—Ä–æ—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏")
            reasoning_steps.append("–ë—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–µ–∂–ª–∏–≤–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç–≤–µ—Ç–∞")

        elif "–ø—Ä–∏–≤–µ—Ç" in query.lower() or "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π" in query.lower() or "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å" in query.lower():
            reasoning_steps.append("–ó–∞–ø—Ä–æ—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
            reasoning_steps.append("–ë—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–º–æ—â–∏")

        elif "—á—Ç–æ —Ç–∞–∫–æ–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ" in query.lower() or "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ" in query.lower():
            reasoning_steps.append("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ")
            reasoning_steps.append("–ë—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞")

        else:
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
            if "–Ω–µ –º–æ–≥—É" in query.lower() or "–ø—Ä–æ–±–ª–µ–º–∞" in query.lower() or "—Ç—Ä—É–¥–Ω–æ" in query.lower():
                reasoning_steps.append("–í –∑–∞–ø—Ä–æ—Å–µ –≤—ã—Ä–∞–∂–µ–Ω—ã —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —á—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
            if query.startswith("–ö–∞–∫ ") or query.startswith("–ß—Ç–æ "):
                reasoning_steps.append(
                    "–í–æ–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '–ö–∞–∫' –∏–ª–∏ '–ß—Ç–æ', —á—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            elif query.startswith("–ü–æ—á–µ–º—É "):
                reasoning_steps.append(
                    "–í–æ–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '–ü–æ—á–µ–º—É', —á—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π")

        reasoning_steps.append("–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        if conversation_history:
            reasoning_steps.append(f"–ù–∞–π–¥–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ {len(conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–æ–π –∂–µ —Ç–µ–º–µ
            same_topic = False
            if len(conversation_history) >= 2:
                prev_query = conversation_history[-2].get("content", "") if conversation_history[-2].get(
                    "role") == "user" else ""
                for word in query.lower().split():
                    if word in prev_query.lower() and len(word) > 3:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                        same_topic = True
                        break

            if same_topic:
                reasoning_steps.append("–¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º")
            else:
                reasoning_steps.append("–¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω –Ω–∞–ø—Ä—è–º—É—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏")
        else:
            reasoning_steps.append("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        reasoning_steps.append("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ä–æ–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
        reasoning_steps.append("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –∏ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")

        self.current_reasoning = reasoning_steps
        return reasoning_steps

    def process_query(self, query: str, conversation_history: list = None, user_id: int = None, **kwargs) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç

        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conversation_history: –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

        Returns:
            str: –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
        """
        try:
            if conversation_history is None:
                conversation_history = []

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if user_id:
                self.memory_store.store_conversation(user_id, query, "user")

            # –ù–∞—á–∏–Ω–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
            reasoning = self.reason(query, {"conversation_history": conversation_history})
            logger.info(f"–†–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ: {reasoning}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ø–æ—á–∫—É —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self.memory_store.store_reasoning_chain(self.name, query, reasoning)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
            sentiment = self.use_tool("detect_sentiment", query)
            logger.info(f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω: {sentiment}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
            question_type = self.use_tool("identify_question_type", query)
            logger.info(f"–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {question_type}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
            if question_type.get(
                    "question_type") == "gratitude" or "—Å–ø–∞—Å–∏–±" in query.lower() or "–±–ª–∞–≥–æ–¥–∞—Ä" in query.lower():
                response = self.use_tool("respond_to_gratitude", conversation_history)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
                if user_id:
                    self.memory_store.store_conversation(user_id, response, "assistant")

                return response

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ –∏ –æ –±–æ—Ç–µ
            lower_query = query.lower()
            bot_related_keywords = ["–±–æ—Ç", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–∫–∞–∫", "–∫—É—Ä–∞—Ç–æ—Ä", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "–∑–∞–ø–∏—Å—å", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç",
                                    "—Ä–µ–≥–∏–æ–Ω", "–≥–æ—Ä–æ–¥", "–±–∞–ª–ª", "–±–æ–Ω—É—Å", "–≤–æ–ª–æ–Ω—Ç–µ—Ä", "–≤–æ–ª–æ–Ω—Ç—ë—Ä", "—Ç–∞–±–µ–ª—å–Ω—ã–π", "–º–µ–Ω—é",
                                    "–∫–æ–¥", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"]

            volunteering_keywords = ["–≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ", "–≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ", "–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ø–æ–º–æ—â—å", "–¥–æ–±—Ä–æ–≤–æ–ª—å—á–µ—Å—Ç–≤–æ",
                                    "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π", "—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π", "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π", "–∫—É–ª—å—Ç—É—Ä–Ω—ã–π"]

            if any(keyword in lower_query for keyword in bot_related_keywords) or \
                    any(keyword in lower_query for keyword in volunteering_keywords) or \
                    "—á—Ç–æ —Ç–∞–∫–æ–µ" in lower_query or "–∫–∞–∫" in lower_query:
                response = self.use_tool("get_general_info_about_volunteering", query)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
                if user_id:
                    self.memory_store.store_conversation(user_id, response, "assistant")

                return response

            # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–æ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞
            best_role = "consultant"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

            if sentiment["mood"] == "–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ" or sentiment["emotion"] in ["–≥—Ä—É—Å—Ç—å", "–∑–ª–æ—Å—Ç—å", "—Å—Ç—Ä–∞—Ö"]:
                best_role = "motivator"  # –î–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –º–æ—Ç–∏–≤–∞—Ç–æ—Ä

            if question_type["question_type"] == "opinion":
                best_role = "mentor"  # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –º–Ω–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç –º–µ–Ω—Ç–æ—Ä

            if question_type["question_type"] == "procedural":
                best_role = "teacher"  # –î–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ö–æ–¥–∏—Ç —É—á–∏—Ç–µ–ª—å

            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞
            self.adapt_role(best_role)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç—å
            self.add_to_memory("sentiment", sentiment)
            self.add_to_memory("question_type", question_type)
            self.add_to_memory("selected_role", best_role)

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            reflection = self.reflect()
            logger.info(f"–†–µ—Ñ–ª–µ–∫—Å–∏—è: {reflection}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
            role_description = self.available_roles.get(best_role, "—ç–∫—Å–ø–µ—Ä—Ç –≤ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–µ")

            system_prompt = f"""
            –¢—ã ‚Äî {role_description}. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–∞.

            –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {sentiment['mood']}, —ç–º–æ—Ü–∏—è: {sentiment['emotion']}

            –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ —Å —É—á–µ—Ç–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã.

            –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–û–¢–ï:
            - –ù–∞–∑–≤–∞–Ω–∏–µ: {get_bot_info('name')}
            - –û–ø–∏—Å–∞–Ω–∏–µ: {get_bot_info('description')}
            - –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å "–í–æ–ª–æ–Ω—Ç—ë—Ä", —É–∫–∞–∑–∞—Ç—å —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –≤—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
            - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: –í –º–µ–Ω—é "–¢–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è" –≤—ã–±—Ä–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –Ω–∞–∂–∞—Ç—å "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
            - –í–∏–¥—ã –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞: {', '.join(get_bot_info('volunteering_types'))}
            - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è: –ü–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä

            –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ–º, –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, 
            –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –≤ —ç—Ç–∏—Ö —Å—Ñ–µ—Ä–∞—Ö.

            –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å —ç—Ç–∏–º–∏ —Ç–µ–º–∞–º–∏, –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—Ç—å, —á—Ç–æ —Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ —Ç–µ–º–∞—Ö 
            –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ –∏ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ.

            –ù–µ –æ–±—Å—É–∂–¥–∞–π –ø–æ–ª–∏—Ç–∏–∫—É, —Ä–µ–ª–∏–≥–∏—é, –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ –Ω–µ –¥–∞–≤–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, 
            –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏—á–∏–Ω–∏—Ç—å –≤—Ä–µ–¥.
            """

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
            messages = [{"role": "system", "content": system_prompt}]

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 5 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
            if conversation_history:
                messages.extend(conversation_history[-5:])

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            messages.append({"role": "user", "content": query})

            # –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            prompt = "\n".join([f"{m['role']}: {m['content']}" for m in messages])

            response = self.llm.generate(prompt)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if user_id:
                self.memory_store.store_conversation(user_id, response, "assistant")

            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self.safe_response(query,
                                    "–ü—Ä–∏–Ω–æ—à—É –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –Ω–æ —è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ–º. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ.")