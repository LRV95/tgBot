# services/ai/base.py
from abc import ABC, abstractmethod
import logging
from typing import Dict, List, Any, Optional
import json
import time

logger = logging.getLogger(__name__)


class AIAgent(ABC):
    """
    –£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π, –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏, —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ –ø–∞–º—è—Ç–∏.
    """

    def __init__(self, name: str = "BaseAgent", autonomy_level: int = 1):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞

        Args:
            name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
            autonomy_level: –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏ (0-3)
                0 - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                1 - –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                2 - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                3 - –ø–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å –≤ —Ä–∞–º–∫–∞—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π
        """
        self.name = name
        self.autonomy_level = autonomy_level
        self.memory = {
            "short_term": [],  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (—Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥)
            "long_term": {}  # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏)
        }
        self.action_history = []  # –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        self.current_reasoning = []  # –¢–µ–∫—É—â–∞—è —Ü–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
        self.available_tools = {}  # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

    @abstractmethod
    def process_query(self, query: str, **kwargs) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        pass

    def reason(self, query: str, context: Dict = None) -> List[str]:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏

        Args:
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        Returns:
            List[str]: –¶–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
        """
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        reasoning_steps = [
            f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: '{query}'",
            "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π",
            "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        ]

        self.current_reasoning = reasoning_steps
        return reasoning_steps

    def can_perform_autonomously(self, action: str, criticality: int = 1) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∞–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ

        Args:
            action: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            criticality: –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è (0-3, –≥–¥–µ 3 - —Å–∞–º–æ–µ –∫—Ä–∏—Ç–∏—á–Ω–æ–µ)

        Returns:
            bool: True, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ
        """
        # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏ –≤—ã—à–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏, –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ
        if self.autonomy_level >= criticality:
            logger.info(f"–ê–≥–µ–Ω—Ç {self.name} –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            return True

        # –ò–Ω–∞—á–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        logger.info(f"–ê–≥–µ–Ω—Ç {self.name} —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è: {action}")
        return False

    def add_to_memory(self, key: str, value: Any, memory_type: str = "short_term") -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞

        Args:
            key: –ö–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            memory_type: –¢–∏–ø –ø–∞–º—è—Ç–∏ ("short_term" –∏–ª–∏ "long_term")
        """
        if memory_type == "short_term":
            self.memory["short_term"].append({key: value, "timestamp": time.time()})
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
            if len(self.memory["short_term"]) > 100:
                self.memory["short_term"] = self.memory["short_term"][-100:]
        else:
            self.memory["long_term"][key] = {"value": value, "timestamp": time.time()}

        logger.debug(f"–ê–≥–µ–Ω—Ç {self.name} –¥–æ–±–∞–≤–∏–ª –≤ {memory_type} –ø–∞–º—è—Ç—å: {key}")

    def retrieve_from_memory(self, key: str = None, memory_type: str = "short_term") -> Any:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞

        Args:
            key: –ö–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–µ—Å–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é –ø–∞–º—è—Ç—å)
            memory_type: –¢–∏–ø –ø–∞–º—è—Ç–∏ ("short_term" –∏–ª–∏ "long_term")

        Returns:
            Any: –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        if memory_type == "short_term":
            if key is None:
                return self.memory["short_term"]

            # –ü–æ–∏—Å–∫ –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
            for item in reversed(self.memory["short_term"]):
                if key in item:
                    return item[key]
            return None
        else:
            if key is None:
                return self.memory["long_term"]

            # –ü–æ–∏—Å–∫ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
            if key in self.memory["long_term"]:
                return self.memory["long_term"][key]["value"]
            return None

    def safe_response(self, query: str, error_message: str = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

        Args:
            query: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            error_message: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Returns:
            str: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        if not error_message:
            error_message = ("–ü—Ä–∏–Ω–æ—à—É –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –Ω–æ —è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ "
                             "–∏ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ. "
                             "–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏? üòä")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω –ª–∏ –æ–Ω —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ–º
        volunteering_keywords = [
            "–≤–æ–ª–æ–Ω—Ç–µ—Ä", "–≤–æ–ª–æ–Ω—Ç—ë—Ä", "–ø–æ–º–æ—â—å", "–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
            "–¥–æ–±—Ä–æ–≤–æ–ª—å—á–µ—Å—Ç–≤–æ", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ø–æ–º–æ–≥–∞—Ç—å", "–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π",
            "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "–≤–∫–ª–∞–¥", "—Å–æ–¥–µ–π—Å—Ç–≤–∏–µ", "—Å–æ–±—ã—Ç–∏–µ"
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ
        contains_volunteering_terms = any(keyword in query.lower() for keyword in volunteering_keywords)

        if contains_volunteering_terms:
            return ("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–µ. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–Ω–∞—á–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.")
        else:
            return error_message
    def register_tool(self, tool_name: str, tool_function: callable, description: str) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º

        Args:
            tool_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            tool_function: –§—É–Ω–∫—Ü–∏—è, —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        """
        self.available_tools[tool_name] = {
            "function": tool_function,
            "description": description
        }
        logger.info(f"–ê–≥–µ–Ω—Ç {self.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")

    def use_tool(self, tool_name: str, *args, **kwargs) -> Any:
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç

        Args:
            tool_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

        Raises:
            ValueError: –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if tool_name not in self.available_tools:
            raise ValueError(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        action = f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}, {kwargs}"
        self.action_history.append({
            "action": action,
            "timestamp": time.time()
        })

        logger.info(f"–ê–≥–µ–Ω—Ç {self.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")
        result = self.available_tools[tool_name]["function"](*args, **kwargs)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        self.action_history[-1]["result"] = result

        return result

    def reflect(self, action_index: int = None) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –Ω–∞–¥ –¥–µ–π—Å—Ç–≤–∏—è–º–∏

        Args:
            action_index: –ò–Ω–¥–µ–∫—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
                         (None –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –Ω–∞–¥ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–æ–π)

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        """
        if action_index is not None and action_index < len(self.action_history):
            # –†–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–∞–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
            action = self.action_history[action_index]
            result = {
                "action": action["action"],
                "success": "result" in action,
                "evaluation": "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ" if "result" in action else "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            }
        else:
            # –†–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–∞–¥ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–æ–π –¥–µ–π—Å—Ç–≤–∏–π
            successful_actions = sum(1 for action in self.action_history if "result" in action)
            result = {
                "total_actions": len(self.action_history),
                "successful_actions": successful_actions,
                "success_rate": successful_actions / max(1, len(self.action_history)),
                "evaluation": "–¶–µ–ø–æ—á–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                if successful_actions == len(self.action_history)
                else "–ù–µ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ü–µ–ø–æ—á–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
            }

        logger.info(f"–ê–≥–µ–Ω—Ç {self.name} –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–µ—Ñ–ª–µ–∫—Å–∏—é: {result}")
        return result

    def adapt_role(self, new_role: str) -> None:
        """
        –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

        Args:
            new_role: –ù–æ–≤–∞—è —Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞
        """
        logger.info(f"–ê–≥–µ–Ω—Ç {self.name} –º–µ–Ω—è–µ—Ç —Ä–æ–ª—å –Ω–∞ {new_role}")
        self.name = f"{new_role}Agent"
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ä–æ–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å

    def create_dynamic_tool(self, tool_code: str, tool_name: str, description: str) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞

        Args:
            tool_code: –ö–æ–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            tool_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –í–ù–ò–ú–ê–ù–ò–ï: exec –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
            namespace = {}
            exec(tool_code, namespace)

            if "tool_function" not in namespace:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: —Ñ—É–Ω–∫—Ü–∏—è tool_function –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            self.register_tool(tool_name, namespace["tool_function"], description)
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
            return False

    def save_state(self) -> Dict:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞

        Returns:
            Dict: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        """
        return {
            "name": self.name,
            "autonomy_level": self.autonomy_level,
            "memory": self.memory,
            "action_history": self.action_history,
            "current_reasoning": self.current_reasoning
        }

    def load_state(self, state: Dict) -> None:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞

        Args:
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        """
        self.name = state.get("name", self.name)
        self.autonomy_level = state.get("autonomy_level", self.autonomy_level)
        self.memory = state.get("memory", self.memory)
        self.action_history = state.get("action_history", self.action_history)
        self.current_reasoning = state.get("current_reasoning", self.current_reasoning)