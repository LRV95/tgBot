import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from bot.states import (
    MAIN_MENU,
    AI_CHAT,
    VOLUNTEER_HOME,
    GUEST_HOME,
    GUEST_REGISTRATION,
    GUEST_TAG_SELECTION,
    PROFILE_MENU,
    WAIT_FOR_PROFILE_UPDATE,
    PROFILE_TAG_SELECTION,
    PROFILE_UPDATE_SELECTION,
    GUEST_CITY_SELECTION
)
from bot.keyboards import (
    get_city_selection_keyboard,
    get_tag_selection_keyboard,
    get_main_menu_keyboard,
    get_volunteer_home_keyboard,
    get_profile_menu_keyboard
)
from database.db import Database
from services.ai_service import RecommendationAgent

db = Database()
logger = logging.getLogger(__name__)


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø",
    –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    text = update.message.text
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    if not user:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        )
        return await handle_guest_registration(update, context)

    if text == "üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞":
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞!",
            reply_markup=get_volunteer_home_keyboard()
        )
        return VOLUNTEER_HOME
    elif text in ["ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫", "ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞"]:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò:")
        return AI_CHAT
    elif text == "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        await update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=get_main_menu_keyboard()
        )
        return GUEST_HOME
    elif text and "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" in text.lower():
        user = update.effective_user
        first_name = user.first_name if user.first_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–í–∞—à–µ –∏–º—è: {first_name}\n–î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return await handle_guest_registration(update, context)
    elif text == "–í—ã—Ö–æ–¥":
        await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return MAIN_MENU
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return MAIN_MENU


async def handle_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ –ò–ò."""
    query = update.message.text
    user_id = update.effective_user.id
    agent = RecommendationAgent()
    response = agent.process_query(query, user_id)
    await update.message.reply_text(response)
    return AI_CHAT


async def handle_volunteer_home(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞."""
    text = update.message.text
    if text == "–ü—Ä–æ—Ñ–∏–ª—å":
        user = db.get_user(update.effective_user.id)
        reply = (
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {user.get('first_name', '')}\n"
            f"–†–æ–ª—å: {user.get('role', '')}\n"
            f"–ë–∞–ª–ª—ã: {user.get('score', 0)}"
        )
        await update.message.reply_text(reply, reply_markup=get_profile_menu_keyboard())
        return PROFILE_MENU
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return VOLUNTEER_HOME


async def handle_guest_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Å—Ç—è.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏–∑ Telegram –≤ context.user_data –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –ë–î –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞.
    """
    user = update.effective_user
    first_name = user.first_name if user.first_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    context.user_data["pending_first_name"] = first_name
    await update.message.reply_text(
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        reply_markup=get_city_selection_keyboard()
    )
    return GUEST_CITY_SELECTION


async def handle_city_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ context.user_data –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É,
    —á—Ç–æ–±—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –æ—Ç–º–µ—á–∞–ª—Å—è. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ–≥–æ–≤.
    """
    query = update.callback_query
    await query.answer()
    data = query.data
    page = context.user_data.get("city_page", 0)

    if data.startswith("city:"):
        city = data.split(":", 1)[1]
        context.user_data["pending_city"] = city
        await query.edit_message_reply_markup(
            reply_markup=get_city_selection_keyboard(selected_cities=[city], page=page)
        )
        return GUEST_CITY_SELECTION
    elif data.startswith("city_next:") or data.startswith("city_prev:"):
        try:
            page = int(data.split(":", 1)[1])
        except ValueError:
            page = 0
        if data.startswith("city_next:"):
            page += 1
        else:
            page -= 1
        context.user_data["city_page"] = page
        selected = [context.user_data["pending_city"]] if "pending_city" in context.user_data else []
        await query.edit_message_reply_markup(
            reply_markup=get_city_selection_keyboard(selected_cities=selected, page=page)
        )
        return GUEST_CITY_SELECTION
    elif data == "done_cities":
        await query.edit_message_text(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:",
            reply_markup=get_tag_selection_keyboard()
        )
        return GUEST_TAG_SELECTION
    return GUEST_CITY_SELECTION


async def handle_tag_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –≤ context.user_data –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É,
    —á—Ç–æ–±—ã –æ—Ç–º–µ—á–∞–ª–∏—Å—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.
    """
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    selected_tags = context.user_data.get("pending_tags", [])

    if data.startswith("tag:"):
        tag = data.split(":", 1)[1]
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ–≥–∞ (toggle)
        if tag in selected_tags:
            selected_tags.remove(tag)
        else:
            selected_tags.append(tag)
        context.user_data["pending_tags"] = selected_tags
        new_markup = get_tag_selection_keyboard(selected_tags=selected_tags)
        try:
            await query.edit_message_reply_markup(reply_markup=new_markup)
        except Exception as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –º–æ–∂–Ω–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
            if "not modified" in str(e):
                pass
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–µ–≥–æ–≤: {e}")
        return GUEST_TAG_SELECTION
    elif data == "done":
        pending_first_name = context.user_data.get("pending_first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        db.save_user(user_id, pending_first_name)
        pending_city = context.user_data.get("pending_city", "")
        if pending_city:
            db.update_user_city(user_id, pending_city)
        db.update_user_tags(user_id, ",".join(selected_tags))
        try:
            await query.edit_message_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        except Exception as e:
            if "not modified" in str(e):
                pass
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        context.user_data.pop("pending_first_name", None)
        context.user_data.pop("pending_city", None)
        context.user_data.pop("pending_tags", None)
        context.user_data.pop("city_page", None)
        return MAIN_MENU
    return GUEST_TAG_SELECTION


async def handle_profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    text = update.message.text
    if text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        user = db.get_user(update.effective_user.id)
        reply = (
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {user.get('first_name', '')}\n"
            f"–†–æ–ª—å: {user.get('role', '')}\n"
            f"–ë–∞–ª–ª—ã: {user.get('score', 0)}"
        )
        await update.message.reply_text(reply)
        return PROFILE_MENU
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
        return WAIT_FOR_PROFILE_UPDATE
    elif text == "–í—ã—Ö–æ–¥":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return PROFILE_MENU


async def handle_contact_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    new_first_name = update.message.text.strip()
    user_id = update.effective_user.id
    db.update_first_name(user_id, new_first_name)
    await update.message.reply_text(
        f"–í–∞—à–µ –∏–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_first_name}",
        reply_markup=get_profile_menu_keyboard()
    )
    return PROFILE_MENU


async def handle_profile_update_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–ª–∏ —Ç–µ–≥–∏.
    """
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("update:"):
        option = data.split(":", 1)[1]
        if option == "contacts":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:")
            return WAIT_FOR_PROFILE_UPDATE
        elif option == "tags":
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏:",
                reply_markup=get_tag_selection_keyboard()
            )
            return PROFILE_TAG_SELECTION
    await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    return PROFILE_MENU


async def handle_profile_tag_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ì–æ—Ç–æ–≤–æ".
    """
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    selected_tags = context.user_data.get("profile_tags", [])

    if data.startswith("tag:"):
        tag = data.split(":", 1)[1]
        if tag in selected_tags:
            selected_tags.remove(tag)
        else:
            selected_tags.append(tag)
        context.user_data["profile_tags"] = selected_tags
        try:
            await query.edit_message_reply_markup(
                reply_markup=get_tag_selection_keyboard(selected_tags=selected_tags)
            )
        except Exception as e:
            if "not modified" in str(e):
                pass
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return PROFILE_TAG_SELECTION
    elif data == "done_tags":
        db.update_user_tags(user_id, ",".join(selected_tags))
        try:
            await query.edit_message_text("–í–∞—à–∏ —Ç–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        except Exception as e:
            if "not modified" in str(e):
                pass
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return PROFILE_MENU
    return PROFILE_TAG_SELECTION
