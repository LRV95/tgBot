import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from bot.states import (MAIN_MENU, AI_CHAT, VOLUNTEER_HOME, GUEST_HOME, PROFILE_MENU, WAIT_FOR_PROFILE_UPDATE,
                        PROFILE_TAG_SELECTION, PROFILE_UPDATE_SELECTION, REGISTRATION_TAG_SELECTION,
                        REGISTRATION_CITY_SELECTION, PROFILE_CITY_SELECTION, EVENT_DETAILS, MODERATION_MENU,
                        REDEEM_CODE, WAIT_FOR_EMPLOYEE_NUMBER)

from bot.keyboards import (get_city_selection_keyboard, get_tag_selection_keyboard, get_main_menu_keyboard,
                           get_volunteer_home_keyboard, get_profile_menu_keyboard, get_events_keyboard,
                           get_profile_update_keyboard, get_event_details_keyboard, get_events_filter_keyboard,
                           get_ai_chat_keyboard)

from database.db import Database
from services.ai_service import ContextRouterAgent
from config import ADMIN_ID
from bot.constants import CITIES, TAGS

db = Database()
logger = logging.getLogger(__name__)

def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2."""
    if not text:
        return ""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in str(text))

def format_event_details(event):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏."""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ —Ç–µ–≥–æ–≤
    name = ""
    description = ""
    if event.get("tags"):
        parts = event["tags"].split(";")
        for part in parts:
            if "–ù–∞–∑–≤–∞–Ω–∏–µ:" in part:
                name = part.split("–ù–∞–∑–≤–∞–Ω–∏–µ:")[1].strip()
            elif "–û–ø–∏—Å–∞–Ω–∏–µ:" in part:
                description = part.split("–û–ø–∏—Å–∞–Ω–∏–µ:")[1].strip()
    
    if not name:
        name = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ #{event['id']}"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"*üéØ {escape_markdown_v2(name)}*\n\n"
        f"üìÖ *–î–∞—Ç–∞:* {escape_markdown_v2(event['event_date'])}\n"
        f"üïí *–í—Ä–µ–º—è:* {escape_markdown_v2(event['start_time'])}\n"
        f"üìç *–ì–æ—Ä–æ–¥:* {escape_markdown_v2(event['city'])}\n"
        f"üë§ *–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:* {escape_markdown_v2(event['creator'])}\n"
        f"üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* {escape_markdown_v2(str(event['participants_count']))}\n"
        f"üèÜ *–ë–∞–ª–ª—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ:* {escape_markdown_v2(str(event['participation_points']))}\n"
    )
    
    if description:
        message += f"\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{escape_markdown_v2(description)}\n"
    
    return message

def create_shareable_event_message(event):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ —Ç–µ–≥–æ–≤
    name = ""
    description = ""
    if event.get("tags"):
        parts = event["tags"].split(";")
        for part in parts:
            if "–ù–∞–∑–≤–∞–Ω–∏–µ:" in part:
                name = part.split("–ù–∞–∑–≤–∞–Ω–∏–µ:")[1].strip()
            elif "–û–ø–∏—Å–∞–Ω–∏–µ:" in part:
                description = part.split("–û–ø–∏—Å–∞–Ω–∏–µ:")[1].strip()
    
    if not name:
        name = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ #{event['id']}"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ (–±–µ–∑ Markdown)
    message = (
        f"üéØ {name}\n\n"
        f"üìÖ –î–∞—Ç–∞: {event['event_date']}\n"
        f"üïí –í—Ä–µ–º—è: {event['start_time']}\n"
        f"üìç –ì–æ—Ä–æ–¥: {event['city']}\n"
        f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {event['creator']}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {event['participants_count']}\n"
        f"üèÜ –ë–∞–ª–ª—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ: {event['participation_points']}\n"
    )
    
    if description:
        message += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}\n"
    
    return message

def format_profile_message(user):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ–Ω—É—Å–∞—Ö."""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    registered_events = []
    if user.get("registered_events"):
        event_ids = [e.strip() for e in user["registered_events"].split(",") if e.strip()]
        for event_id in event_ids:
            try:
                event = db.get_event_by_id(int(event_id))
                if event:
                    name = ""
                    if event.get("tags"):
                        parts = event["tags"].split(";")
                        for part in parts:
                            if "–ù–∞–∑–≤–∞–Ω–∏–µ:" in part:
                                name = part.split("–ù–∞–∑–≤–∞–Ω–∏–µ:")[1].strip()
                                break
                    if not name:
                        name = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ #{event['id']}"
                    registered_events.append(f"‚Ä¢ {escape_markdown_v2(name)} \\({escape_markdown_v2(event['event_date'])} {escape_markdown_v2(event['start_time'])}\\)")
            except:
                continue

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
    interests = [tag.strip() for tag in user.get("tags", "").split(",") if tag.strip()]
    interests_text = "‚Ä¢ " + "\n‚Ä¢ ".join(escape_markdown_v2(interest) for interest in interests) if interests else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥–∞—Ö
    score = user.get("score", 0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    reply = (
        f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞*\n\n"
        f"üìù *–ò–º—è:* {escape_markdown_v2(user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
        f"üåü *–†–æ–ª—å:* {escape_markdown_v2(user.get('role', '–í–æ–ª–æ–Ω—Ç–µ—Ä'))}\n"
        f"üèÜ *–ë–∞–ª–ª—ã:* {escape_markdown_v2(str(score))}\n"
        f"üèôÔ∏è *–ì–æ—Ä–æ–¥:* {escape_markdown_v2(user.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω'))}\n\n"
        f"üè∑Ô∏è *–ò–Ω—Ç–µ—Ä–µ—Å—ã:*\n{interests_text}\n\n"
    )
    
    if registered_events:
        reply += f"üìÖ *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:*\n" + "\n".join(registered_events)
    else:
        reply += "üìÖ *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:* –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π"
        
    return reply

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    user_id = update.effective_user.id
    user = db.get_user(user_id)

    if not user:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return await handle_registration(update, context)

    user_role = user.get("role", "user")

    if text == "–ú–æ–¥–µ—Ä–∞—Ü–∏—è":
        from bot.handlers.admin import moderation_menu
        return await moderation_menu(update, context)

    if text == "üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞":
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞!",
            reply_markup=get_volunteer_home_keyboard()
        )
        return VOLUNTEER_HOME
    elif text in ["ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫", "ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞"]:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò:", reply_markup=get_ai_chat_keyboard())
        return AI_CHAT
    elif text == "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        context.user_data["events_page"] = 0
        await update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=get_main_menu_keyboard(role=user_role)
        )
        return await handle_events(update, context)
    elif text and "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" in text.lower():
        user = update.effective_user
        first_name = user.first_name if user.first_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–í–∞—à–µ –∏–º—è: {first_name}\n–î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return await handle_registration(update, context)
    elif text == "–í—ã—Ö–æ–¥":
        # –í–º–µ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
        await update.message.reply_text(
            "–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard(role=user_role)
        )
        return MAIN_MENU
    else:
        if user_role == "admin" and text.startswith("/"):
            return MAIN_MENU

        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard(role=user_role)
        )
        return MAIN_MENU


async def handle_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.message.text.strip()
    if query.lower() in ["–≤—ã—Ö–æ–¥", "–Ω–∞–∑–∞–¥", "–º–µ–Ω—é", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
        context.user_data.pop("conversation_history", None)
        await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())
        return MAIN_MENU

    if "conversation_history" not in context.user_data:
        context.user_data["conversation_history"] = []

    context.user_data["conversation_history"].append({"role": "user", "content": query})

    router_agent = ContextRouterAgent()
    response = router_agent.process_query(query, update.effective_user.id, context.user_data["conversation_history"])

    context.user_data["conversation_history"].append({"role": "assistant", "content": response})

    await update.message.reply_markdown(response)
    return AI_CHAT

async def handle_volunteer_home(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    user_role = user.get("role", "user") if user else "user"
    
    if text == "–ü—Ä–æ—Ñ–∏–ª—å":
        user = db.get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return MAIN_MENU
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é format_profile_message –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        reply = format_profile_message(user)
        await update.message.reply_markdown_v2(reply, reply_markup=get_profile_menu_keyboard())
        return PROFILE_MENU
    elif text == "–¢–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        context.user_data["events_page"] = 0
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç–µ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if "selected_tag" in context.user_data:
            context.user_data.pop("selected_tag", None)
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        return await handle_events(update, context)
    elif text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        info_text = (
            f"*‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*\n\n"
            f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\\.\n\n"
            f"*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
            f"‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —Ç–µ–≥–∞–º\n"
            f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
            f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º\n"
            f"‚Ä¢ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤\n\n"
            f"–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã—Ö–æ–¥\"\\."
        )
        await update.message.reply_markdown_v2(info_text, reply_markup=get_volunteer_home_keyboard())
        return VOLUNTEER_HOME
    elif text == "–ë–æ–Ω—É—Å—ã":
        user = db.get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return MAIN_MENU

        score = user.get("score", 0)

        reply = (
            f"üèÜ *–í–∞—à–∏ –±–æ–Ω—É—Å—ã*\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: *{escape_markdown_v2(str(score))}*\n\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–∞–ª–ª—ã\\.\n\n"
        )
        
        await update.message.reply_markdown_v2(reply, reply_markup=get_volunteer_home_keyboard())
        return VOLUNTEER_HOME
    elif text == "–í–≤–µ—Å—Ç–∏ –∫–æ–¥":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:")
        return REDEEM_CODE
    elif text == "–í—ã—Ö–æ–¥":
        reply = f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!"
        await update.message.reply_text(reply, reply_markup=get_main_menu_keyboard(role=user_role))
        return MAIN_MENU
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return VOLUNTEER_HOME

async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    first_name = user.first_name if user.first_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_id = user.id
    telegram_tag = user.username if user.username else ""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –±–µ–∑ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    try:
        role = "admin" if user_id in ADMIN_ID else "user"
        db.save_user(user_id, first_name, role=role, telegram_tag=telegram_tag, employee_number=None)
    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return MAIN_MENU
    context.user_data["pending_first_name"] = first_name
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä (14 —Ü–∏—Ñ—Ä):")
    return WAIT_FOR_EMPLOYEE_NUMBER


async def handle_registration_city_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    from bot.constants import CITIES  # —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    page = context.user_data.get("city_page", 0)

    if data.startswith("city:"):
        try:
            city_index = int(data.split(":", 1)[1])
            city = CITIES[city_index]
        except (ValueError, IndexError):
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞.")
            return REGISTRATION_CITY_SELECTION

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ user_data
        context.user_data["pending_city"] = city
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await update_to_state(
            query,
            f"–ì–æ—Ä–æ–¥ '{city}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:",
            reply_markup=get_tag_selection_keyboard()
        )
        return REGISTRATION_TAG_SELECTION

    elif data.startswith("city_next:") or data.startswith("city_prev:"):
        try:
            page = int(data.split(":", 1)[1])
        except ValueError:
            page = 0
        if data.startswith("city_next:"):
            page += 1
        else:
            page = max(0, page - 1)
        context.user_data["city_page"] = page
        selected = [context.user_data["pending_city"]] if "pending_city" in context.user_data else []
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–±–µ–∑ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        await query.edit_message_reply_markup(
            reply_markup=get_city_selection_keyboard(selected_cities=selected, page=page))
        return REGISTRATION_CITY_SELECTION

    elif data == "done_cities":
        if "pending_city" not in context.user_data:
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.")
            return REGISTRATION_CITY_SELECTION
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        db.update_user_city(user_id, context.user_data["pending_city"])
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤)
        await update_to_state(
            query,
            f"–ì–æ—Ä–æ–¥ '{context.user_data['pending_city']}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:",
            reply_markup=get_tag_selection_keyboard()
        )
        return REGISTRATION_TAG_SELECTION

    return REGISTRATION_CITY_SELECTION

async def handle_registration_tag_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    from bot.constants import TAGS  # —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    selected_tags = context.user_data.get("pending_tags", [])

    if data.startswith("tag:"):
        try:
            tag_index = int(data.split(":", 1)[1])
            tag = TAGS[tag_index]
        except (ValueError, IndexError):
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–≥–∞.")
            return REGISTRATION_TAG_SELECTION

        if tag in selected_tags:
            selected_tags.remove(tag)
        else:
            selected_tags.append(tag)
        context.user_data["pending_tags"] = selected_tags
        # –û–±–Ω–æ–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä
        await query.edit_message_reply_markup(reply_markup=get_tag_selection_keyboard(selected_tags=selected_tags))
        return REGISTRATION_TAG_SELECTION

    elif data == "done_tags":
        if not selected_tags:
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥.")
            return REGISTRATION_TAG_SELECTION
        db.update_user_tags(user_id, ",".join(selected_tags))
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update_to_state(
            query,
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            reply_markup=get_main_menu_keyboard(role="user")
        )
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data.pop("pending_city", None)
        context.user_data.pop("pending_tags", None)
        return MAIN_MENU

    return REGISTRATION_TAG_SELECTION

async def handle_profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    user_role = user.get("role", "user") if user else "user"
    
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é":
        await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=get_profile_update_keyboard())
        return PROFILE_UPDATE_SELECTION
    elif text == "–í—ã—Ö–æ–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_volunteer_home_keyboard())
        return VOLUNTEER_HOME
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return PROFILE_MENU

async def get_profile_info(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = db.get_user(user_id)
    if not user:
        return "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é format_profile_message –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    return format_profile_message(user)

async def handle_contact_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_first_name = update.message.text.strip()
    user_id = update.effective_user.id
    db.update_first_name(user_id, new_first_name)
    profile_info = await get_profile_info(user_id)
    await update.message.reply_markdown_v2(
        f"‚úÖ –í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ\\!\n\n{profile_info}",
        reply_markup=get_profile_menu_keyboard()
    )
    return PROFILE_MENU

async def handle_profile_update_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("update:"):
        option = data.split(":", 1)[1]
        if option == "name":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")
            return WAIT_FOR_PROFILE_UPDATE
        elif option == "tags":
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.get_user(query.from_user.id)
            current_tags = [tag.strip() for tag in user.get("tags", "").split(",") if tag.strip()]
            context.user_data["profile_tags"] = current_tags
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=get_tag_selection_keyboard(selected_tags=current_tags))
            return PROFILE_TAG_SELECTION
        elif option == "city":
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:", reply_markup=get_city_selection_keyboard())
            return PROFILE_CITY_SELECTION
        elif option == "cancel":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
            user = db.get_user(query.from_user.id)
            profile_info = await get_profile_info(user.get("id"))
            await query.edit_message_text(
                f"*–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n{profile_info}",
                parse_mode="MarkdownV2",
                reply_markup=None
            )
            return PROFILE_MENU
    await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    return PROFILE_MENU

async def handle_profile_tag_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    selected_tags = context.user_data.get("profile_tags", [])
    
    if data.startswith("tag:"):
        tag = data.split(":", 1)[1]
        if tag in selected_tags:
            selected_tags.remove(tag)
        else:
            selected_tags.append(tag)
        context.user_data["profile_tags"] = selected_tags
        try:
            await query.edit_message_reply_markup(reply_markup=get_tag_selection_keyboard(selected_tags=selected_tags))
        except Exception as e:
            if "not modified" in str(e):
                pass
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
        return PROFILE_TAG_SELECTION
    elif data == "done_tags":
        db.update_user_tags(user_id, ",".join(selected_tags))
        profile_info = await get_profile_info(user_id)
        try:
            await query.message.reply_markdown_v2(
                f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\\!\n\n{profile_info}",
                reply_markup=get_profile_menu_keyboard()
            )
            await query.message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
        return PROFILE_MENU
    return PROFILE_TAG_SELECTION

async def handle_events(update, context) -> int:
    query = update.callback_query if update.callback_query else None
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    page = context.user_data.get("events_page", 0)
    selected_tag = context.user_data.get("selected_tag", None)

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    if selected_tag and selected_tag != "all":
        if user and user.get("city"):
            events = db.get_events_by_tag(selected_tag, limit=2, offset=page * 2)
            total_events = db.get_events_count_by_tag(selected_tag)
            if not events:
                events = db.get_events(limit=2, offset=page * 2)
                total_events = db.get_events_count()
        else:
            events = db.get_events_by_tag(selected_tag, limit=2, offset=page * 2)
            total_events = db.get_events_count_by_tag(selected_tag)
    else:
        if user and user.get("city"):
            events = db.get_events_by_city(user["city"], limit=2, offset=page * 2)
            total_events = db.get_events_count_by_city(user["city"])
            if not events:
                events = db.get_events(limit=2, offset=page * 2)
                total_events = db.get_events_count()
        else:
            events = db.get_events(limit=2, offset=page * 2)
            total_events = db.get_events_count()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    registered = []
    if user and "registered_events" in user:
        registered = [e.strip() for e in user.get("registered_events", "").split(",") if e.strip()]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    if selected_tag and selected_tag != "all":
        message_text = f"–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —Ç–µ–≥—É '{selected_tag}':"
    else:
        message_text = "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:"

    # –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–í—ã—Ö–æ–¥"
    if not events:
        message_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        exit_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data="back_to_menu")]
        ])
        if query:
            await query.edit_message_text(message_text, reply_markup=exit_keyboard)
        else:
            await update.message.reply_text(message_text, reply_markup=exit_keyboard)
        return GUEST_HOME

    # –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if query:
        await query.edit_message_text(
            message_text,
            reply_markup=get_events_keyboard(events, page, 2, total_events, registered_events=registered)
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=get_events_keyboard(events, page, 2, total_events, registered_events=registered)
        )
    return GUEST_HOME

async def handle_events_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    user_role = user.get("role", "user") if user else "user"

    if data.startswith("view_event:"):
        event_id = data.split(":", 1)[1]
        event = db.get_event_by_id(int(event_id))
        if not event:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return GUEST_HOME

        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        context.user_data["viewing_event_details"] = True
        context.user_data["current_event_id"] = event_id

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        event_details = format_event_details(event)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        is_registered = db.is_user_registered_for_event(user_id, event_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        await query.edit_message_text(
            event_details,
            reply_markup=get_event_details_keyboard(event_id, is_registered),
            parse_mode="MarkdownV2"
        )
        return EVENT_DETAILS

    elif data.startswith("share_event:"):
        event_id = data.split(":", 1)[1]
        event = db.get_event_by_id(int(event_id))
        if not event:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return GUEST_HOME

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        shareable_message = create_shareable_event_message(event)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–º –æ–Ω –º–æ–∂–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
        await query.message.reply_text("üì§ –í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏:")
        await query.message.reply_text(shareable_message)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        return EVENT_DETAILS

    elif data == "show_filters":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        selected_tag = context.user_data.get("selected_tag", None)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=get_events_filter_keyboard(selected_tag)
        )
        return GUEST_HOME

    elif data.startswith("filter_tag:"):
        tag = data.split(":", 1)[1]
        if tag == "all":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
            context.user_data.pop("selected_tag", None)
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥—É
            context.user_data["selected_tag"] = tag

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        context.user_data["events_page"] = 0

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
        return await handle_events(update, context)

    elif data.startswith("register_event:"):
        event_id = data.split(":", 1)[1]

        if db.is_user_registered_for_event(user_id, event_id):
            await query.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
            return GUEST_HOME

        event = db.get_event_by_id(int(event_id))
        if not event:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return GUEST_HOME

        code = "–ù–µ —É–∫–∞–∑–∞–Ω"
        if event.get("tags"):
            parts = event["tags"].split(";")
            for part in parts:
                if "–ö–æ–¥:" in part:
                    code = part.split("–ö–æ–¥:")[1].strip()
                    break

        reg_events = user.get("registered_events", "")
        events_list = [e.strip() for e in reg_events.split(",") if e.strip()]
        events_list.append(f"{event_id}")
        db.update_user_registered_events(user_id, ",".join(events_list))

        db.increment_event_participants_count(int(event_id))

        await query.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ö–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {code}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if context.user_data.get("viewing_event_details"):
            event = db.get_event_by_id(int(event_id))
            event_details = format_event_details(event)
            await query.edit_message_text(
                event_details,
                reply_markup=get_event_details_keyboard(event_id, True),
                parse_mode="MarkdownV2"
            )
            return EVENT_DETAILS
        else:
            return await handle_events(update, context)

    elif data.startswith("unregister_event:"):
        event_id = data.split(":", 1)[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not db.is_user_registered_for_event(user_id, event_id):
            await query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
            return GUEST_HOME

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        event = db.get_event_by_id(int(event_id))
        if not event:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return GUEST_HOME

        # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        reg_events = user.get("registered_events", "")
        events_list = [e.strip() for e in reg_events.split(",") if e.strip() and e != str(event_id)]
        db.update_user_registered_events(user_id, ",".join(events_list))

        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        db.decrement_event_participants_count(int(event_id))

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        event = db.get_event_by_id(int(event_id))

        # –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if context.user_data.get("viewing_event_details"):
            event_details = format_event_details(event)
            await query.edit_message_text(
                event_details,
                reply_markup=get_event_details_keyboard(event_id, False),
                parse_mode="MarkdownV2"
            )
            return EVENT_DETAILS
        else:
            return await handle_events(update, context)

    elif data == "back_to_events":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        context.user_data.pop("viewing_event_details", None)
        context.user_data.pop("current_event_id", None)
        return await handle_events(update, context)

    elif data.startswith("events_next:") or data.startswith("events_prev:"):
        page = context.user_data.get("events_page", 0)
        if data.startswith("events_next:"):
            page += 1
        else:
            page = max(0, page - 1)
        context.user_data["events_page"] = page
        return await handle_events(update, context)

    elif data == "back_to_menu":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
        await query.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                       reply_markup=get_main_menu_keyboard(role=user_role))
        # –£–¥–∞–ª—è–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            await query.message.delete()
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await query.edit_message_reply_markup(reply_markup=None)
        return MAIN_MENU

    return MAIN_MENU


async def handle_profile_city_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data
    page = context.user_data.get("profile_city_page", 0)
    if data.startswith("city:"):
        city = data.split(":", 1)[1]
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        if context.user_data.get("pending_profile_city") == city:
            context.user_data.pop("pending_profile_city", None)
            await query.edit_message_reply_markup(reply_markup=get_city_selection_keyboard(page=page))
        else:
            context.user_data["pending_profile_city"] = city
            user_id = query.from_user.id
            db.update_user_city(user_id, city)
            profile_info = await get_profile_info(user_id)
            try:
                await query.message.reply_markdown_v2(
                    f"‚úÖ –í–∞—à –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω\\!\n\n{profile_info}",
                    reply_markup=get_profile_menu_keyboard()
                )
                await query.message.delete()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞: {e}")
            return PROFILE_MENU
    elif data.startswith("city_next:") or data.startswith("city_prev:"):
        try:
            page = int(data.split(":", 1)[1])
        except ValueError:
            page = 0
        if data.startswith("city_next:"):
            page += 1
        else:
            page -= 1
        context.user_data["profile_city_page"] = page
        selected = [context.user_data["pending_profile_city"]] if "pending_profile_city" in context.user_data else []
        await query.edit_message_reply_markup(reply_markup=get_city_selection_keyboard(selected_cities=selected, page=page))
        return PROFILE_CITY_SELECTION
    elif data == "done_cities":
        if not context.user_data.get("pending_profile_city"):
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
            return PROFILE_CITY_SELECTION
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return PROFILE_CITY_SELECTION
    return PROFILE_CITY_SELECTION

async def handle_moderation_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        from bot.keyboards import get_main_menu_keyboard
        user_record = db.get_user(update.effective_user.id)
        role = user_record.get("role") if user_record else "user"
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard(role=role))
        return MAIN_MENU

    from bot.keyboards import get_moderation_menu_keyboard
    await update.message.reply_text("–ú–µ–Ω—é –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_moderation_menu_keyboard())
    return MODERATION_MENU


async def handle_code_redemption(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    entered_code = update.message.text.strip().upper()
    user = db.get_user(user_id)
    if not user:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return VOLUNTEER_HOME

    reg_str = user.get("registered_events", "")
    # –¢–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ "event_id" –∏–ª–∏ "event_id:redeemed"
    registrations = [e.strip() for e in reg_str.split(",") if e.strip()]
    found = False
    new_registrations = []
    awarded_points = 0
    messages = []

    for reg in registrations:
        parts = reg.split(":")
        event_id = parts[0]
        redeemed = (len(parts) > 1 and parts[1] == "redeemed")
        if not redeemed:
            event = db.get_event_by_id(int(event_id))
            if event:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ –ø–æ–ª—è tags
                code_from_event = ""
                if event.get("tags"):
                    for part in event["tags"].split(";"):
                        if "–ö–æ–¥:" in part:
                            code_from_event = part.split("–ö–æ–¥:")[1].strip().upper()
                            break
                # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–¥–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                if code_from_event == entered_code:
                    points = event.get("participants_count", 5)
                    awarded_points += points
                    messages.append(f"–ó–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤.")
                    # –ü–æ–º–µ—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
                    new_registrations.append(f"{event_id}:redeemed")
                    found = True
                else:
                    new_registrations.append(reg)
            else:
                new_registrations.append(reg)
        else:
            new_registrations.append(reg)

    if not found:
        await update.message.reply_text("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return VOLUNTEER_HOME

    db.update_user_registered_events(user_id, ",".join(new_registrations))

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    new_score = user.get("score", 0) + awarded_points
    with db.connect() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET score = ? WHERE id = ?", (new_score, user_id))
        conn.commit()

    message_text = "\n".join(messages) + f"\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_score} –±–∞–ª–ª–æ–≤."
    await update.message.reply_text(message_text)
    return VOLUNTEER_HOME

async def handle_employee_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    employee_number_str = update.message.text.strip()
    if not (employee_number_str.isdigit() and len(employee_number_str) == 14):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä ‚Äì —Ä–æ–≤–Ω–æ 14 —Ü–∏—Ñ—Ä.")
        return WAIT_FOR_EMPLOYEE_NUMBER
    employee_number = int(employee_number_str)
    context.user_data["pending_employee_number"] = employee_number
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–±–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
    user_id = update.effective_user.id
    db.save_user(user_id, context.user_data["pending_first_name"], role="user",
                 telegram_tag=update.effective_user.username if update.effective_user.username else "",
                 employee_number=employee_number)
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=get_city_selection_keyboard())
    return REGISTRATION_CITY_SELECTION

async def update_to_state(query, text: str, reply_markup=None):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è query, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
    """
    try:
        # –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(text, reply_markup=reply_markup)
