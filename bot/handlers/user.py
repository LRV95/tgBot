"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥."""

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from bot.states import (
    MAIN_MENU, AI_CHAT, VOLUNTEER_HOME, GUEST_HOME,
    GUEST_REGISTRATION, GUEST_TAG_SELECTION,
    PROFILE_MENU, WAIT_FOR_PROFILE_UPDATE,
    PROFILE_TAG_SELECTION, PROFILE_UPDATE_SELECTION
)
from bot.keyboards import (
    get_main_menu_keyboard,
    get_volunteer_home_keyboard,
    get_profile_menu_keyboard,
    get_tag_selection_keyboard
)
from database.db import Database
from services.ai_service import ContextRouterAgent

db = Database()

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    user = update.effective_user
    role = db.get_user(user.id).get("role", "guest")
    choice = update.message.text.strip()
    
    if role == "guest":
        if choice == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
            await update.message.reply_markdown("*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è, –§–∞–º–∏–ª–∏—è, Email*")
            return GUEST_REGISTRATION
        elif choice == "ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫":
            exit_keyboard = ReplyKeyboardMarkup([["–í—ã—Ö–æ–¥."]], resize_keyboard=True)
            await update.message.reply_markdown("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò –ü–æ–º–æ—â–Ω–∏–∫–∞:", reply_markup=exit_keyboard)
            return AI_CHAT
        elif choice == "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
            events = db.get_all_events()
            if events:
                message = "*–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:*\n"
                for event in events:
                    message += f"ID: {event['id']}, –î–∞—Ç–∞: {event['event_date']}, –í—Ä–µ–º—è: {event['start_time']}, –°–æ–∑–¥–∞—Ç–µ–ª—å: {event['creator']}, –¢–µ–≥–∏: {event['tags']}\n"
                await update.message.reply_markdown(message)
            else:
                await update.message.reply_markdown("*–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç.*")
            await update.message.reply_markdown("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_menu_keyboard("guest"))
            return GUEST_HOME
        elif choice == "–í—ã—Ö–æ–¥":
            await update.message.reply_markdown("*–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!*")
            return ConversationHandler.END
        else:
            await update.message.reply_markdown("*‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.*")
            return GUEST_HOME
    else:
        if "–î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞" in choice:
            await update.message.reply_markdown("*üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞.*", reply_markup=get_volunteer_home_keyboard())
            return VOLUNTEER_HOME
        elif "–ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞" in choice:
            exit_keyboard = ReplyKeyboardMarkup([["–í—ã—Ö–æ–¥."]], resize_keyboard=True)
            await update.message.reply_markdown("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞:", reply_markup=exit_keyboard)
            return AI_CHAT
        else:
            await update.message.reply_markdown("*‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.*")
            return MAIN_MENU

async def handle_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç–∞ —Å –ò–ò."""
    text = update.message.text.strip()
    if text == "–í—ã—Ö–æ–¥.":
        role = db.get_user(update.effective_user.id).get("role", "user")
        keyboard = get_main_menu_keyboard(role)
        await update.message.reply_markdown("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        return MAIN_MENU
    else:
        agent = ContextRouterAgent()
        response = agent.process_query(text, update.effective_user.id)
        await update.message.reply_markdown(response)
        exit_keyboard = ReplyKeyboardMarkup([["–í—ã—Ö–æ–¥."]], resize_keyboard=True)
        return AI_CHAT

async def handle_volunteer_home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–º–∞—à–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞."""
    text = update.message.text.strip()
    if text == "–í—ã—Ö–æ–¥.":
        role = db.get_user(update.effective_user.id).get("role", "user")
        keyboard = get_main_menu_keyboard(role)
        await update.message.reply_markdown("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        return MAIN_MENU
    elif text == "–ü—Ä–æ—Ñ–∏–ª—å":
        await update.message.reply_markdown("*–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è:*", reply_markup=get_profile_menu_keyboard())
        return PROFILE_MENU
    else:
        await update.message.reply_markdown(f"*{text} - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.*")
        await update.message.reply_markdown("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_volunteer_home_keyboard())
        return VOLUNTEER_HOME

async def handle_guest_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Å—Ç—è."""
    text = update.message.text.strip()
    parts = [part.strip() for part in text.split(",")]
    if len(parts) != 3:
        await update.message.reply_markdown("*‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: –ò–º—è, –§–∞–º–∏–ª–∏—è, Email*")
        return GUEST_REGISTRATION
    
    first_name, last_name, email = parts
    user = update.effective_user
    db.save_user(user.id, first_name, last_name, email, "", 0, "", "user")
    await update.message.reply_markdown("*‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*")
    
    context.user_data['selected_tags'] = []
    keyboard = get_tag_selection_keyboard()
    await update.message.reply_markdown("*–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–≥–∏:*", reply_markup=keyboard)
    return GUEST_TAG_SELECTION

async def handle_tag_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    data = query.data
    
    if data.startswith("tag:"):
        tag = data.split(":", 1)[1]
        selected = context.user_data.get('selected_tags', [])
        if tag in selected:
            selected.remove(tag)
        else:
            selected.append(tag)
        context.user_data['selected_tags'] = selected
        
        text = "*–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–≥–∏:*\n"
        text += "–í—ã–±—Ä–∞–Ω–æ: " + ", ".join(selected) if selected else "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ."
        keyboard = get_tag_selection_keyboard(selected)
        await query.edit_message_text(text=text, reply_markup=keyboard, parse_mode="Markdown")
        return GUEST_TAG_SELECTION
    
    elif data == "done":
        user = update.effective_user
        selected = context.user_data.get('selected_tags', [])
        tags_str = ", ".join(selected)
        current_user = db.get_user(user.id)
        if current_user:
            db.save_user(
                user.id,
                current_user.get("first_name", ""),
                current_user.get("last_name", ""),
                current_user.get("email", ""),
                current_user.get("registered_events", ""),
                current_user.get("score", 0),
                current_user.get("used_codes", ""),
                current_user.get("role", "user"),
                tags_str
            )
        await query.edit_message_text(text="*‚úÖ –¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: " + tags_str + "*", parse_mode="Markdown")
        keyboard = get_main_menu_keyboard("user")
        await query.message.reply_markdown("*üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*", reply_markup=keyboard)
        return MAIN_MENU

async def handle_profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è."""
    text = update.message.text.strip()
    if text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        user = db.get_user(update.effective_user.id)
        if user:
            profile_message = ("*–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n"
                             f"–ò–º—è: {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                             f"–§–∞–º–∏–ª–∏—è: {user.get('last_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                             f"Email: {user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                             f"–†–æ–ª—å: {user.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                             f"–°—á—ë—Ç: {user.get('score', 0)}\n"
                             f"–¢–µ–≥–∏: {user.get('tags', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}")
            await update.message.reply_markdown(profile_message)
        else:
            await update.message.reply_markdown("*–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*")
        await update.message.reply_markdown("*–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è:*", reply_markup=get_profile_menu_keyboard())
        return PROFILE_MENU
    
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="update:contact")],
            [InlineKeyboardButton("–¢–µ–≥–∏", callback_data="update:tags")]
        ])
        await update.message.reply_markdown("*–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:*", reply_markup=keyboard)
        return PROFILE_UPDATE_SELECTION
    
    elif text == "–í—ã—Ö–æ–¥":
        await update.message.reply_markdown("*–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞.*", reply_markup=get_volunteer_home_keyboard())
        return VOLUNTEER_HOME
    
    else:
        await update.message.reply_markdown("*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.*", reply_markup=get_profile_menu_keyboard())
        return PROFILE_MENU

async def handle_profile_update_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
    query = update.callback_query
    await query.answer()
    data = query.data
    
    if data == "update:contact":
        await query.edit_message_text(text="*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è, –§–∞–º–∏–ª–∏—è, Email*", parse_mode="Markdown")
        return WAIT_FOR_PROFILE_UPDATE
    elif data == "update:tags":
        user = update.effective_user
        current_user = db.get_user(user.id)
        if current_user and current_user.get("tags"):
            context.user_data['selected_tags'] = [tag.strip() for tag in current_user.get("tags", "").split(",") if tag.strip()]
        else:
            context.user_data['selected_tags'] = []
        
        keyboard = get_tag_selection_keyboard(context.user_data['selected_tags'])
        init_text = "*–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–≥–∏:*\n"
        init_text += "–í—ã–±—Ä–∞–Ω–æ: " + ", ".join(context.user_data['selected_tags']) if context.user_data['selected_tags'] else "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ."
        await query.edit_message_text(text=init_text, reply_markup=keyboard, parse_mode="Markdown")
        return PROFILE_TAG_SELECTION

async def handle_contact_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    text = update.message.text.strip()
    parts = [part.strip() for part in text.split(",")]
    if len(parts) != 3:
        await update.message.reply_markdown("*‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: –ò–º—è, –§–∞–º–∏–ª–∏—è, Email*")
        return WAIT_FOR_PROFILE_UPDATE
    
    first_name, last_name, email = parts
    user = update.effective_user
    current_user = db.get_user(user.id)
    if current_user:
        db.save_user(
            user.id,
            first_name,
            last_name,
            email,
            current_user.get("registered_events", ""),
            current_user.get("score", 0),
            current_user.get("used_codes", ""),
            current_user.get("role", "user"),
            current_user.get("tags", "")
        )
    await update.message.reply_markdown("*‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*")
    keyboard = get_main_menu_keyboard(current_user.get("role", "user"))
    await update.message.reply_markdown("*üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*", reply_markup=keyboard)
    return MAIN_MENU

async def handle_profile_tag_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    query = update.callback_query
    await query.answer()
    data = query.data
    selected = context.user_data.get('selected_tags', [])
    
    if data.startswith("tag:"):
        tag = data.split(":", 1)[1]
        if tag in selected:
            selected.remove(tag)
        else:
            selected.append(tag)
        context.user_data['selected_tags'] = selected
        
        text = "*–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–≥–∏:*\n"
        text += "–í—ã–±—Ä–∞–Ω–æ: " + ", ".join(selected) if selected else "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ."
        keyboard = get_tag_selection_keyboard(selected)
        await query.edit_message_text(text=text, reply_markup=keyboard, parse_mode="Markdown")
        return PROFILE_TAG_SELECTION
    
    elif data == "done_tags":
        user = update.effective_user
        selected = context.user_data.get('selected_tags', [])
        tags_str = ", ".join(selected)
        current_user = db.get_user(user.id)
        if current_user:
            db.save_user(
                user.id,
                current_user.get("first_name", ""),
                current_user.get("last_name", ""),
                current_user.get("email", ""),
                current_user.get("registered_events", ""),
                current_user.get("score", 0),
                current_user.get("used_codes", ""),
                current_user.get("role", "user"),
                tags_str
            )
        await query.edit_message_text(text="*‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–≥–∏: " + tags_str + "*", parse_mode="Markdown")
        keyboard = get_main_menu_keyboard(current_user.get("role", "user"))
        await query.message.reply_markdown("*üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*", reply_markup=keyboard)
        return MAIN_MENU
