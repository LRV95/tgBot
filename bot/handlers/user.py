import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from bot.keyboards.common import get_cancel_keyboard
from bot.states import (MAIN_MENU, AI_CHAT, VOLUNTEER_DASHBOARD, GUEST_DASHBOARD, PROFILE_MENU, 
                    PROFILE_UPDATE_NAME, PROFILE_TAG_SELECT, REGISTRATION_TAG_SELECT,
                    REGISTRATION_CITY_SELECT, PROFILE_CITY_SELECT, EVENT_DETAILS, MOD_MENU,
                    EVENT_CODE_REDEEM, PROFILE_EMPLOYEE_NUMBER, PROFILE_EMPLOYEE_NUMBER_UPDATE,
                    LEADERBOARD_REGION_SELECT, LEADERBOARD_VIEW, EVENT_TAG_SELECT)

from bot.keyboards import (get_ai_chat_keyboard, get_city_selection_keyboard, get_tag_selection_keyboard, get_main_menu_keyboard,
                           get_volunteer_dashboard_keyboard, get_profile_menu_keyboard, get_events_keyboard,
                           get_events_filter_keyboard, get_event_details_keyboard, get_events_city_filter_keyboard,
                           get_leaderboard_region_keyboard, get_tag_filter_keyboard_for_region)

from database.models.project import ProjectModel
from services.ai import ContextRouterAgent
from database import UserModel, EventModel
from bot.constants import CITIES, TAGS

logger = logging.getLogger(__name__)

user_db = UserModel()
event_db = EventModel()


async def handle_event_tag_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞":
        context.user_data.pop("selected_city", None)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=get_events_city_filter_keyboard(context.user_data.get("selected_city"))
        )
        return GUEST_DASHBOARD

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        context.user_data.pop("selected_city", None)
        context.user_data.pop("selected_tag", None)
        await update.message.reply_text(
            "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ"
    elif text == "–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ":
        context.user_data.pop("selected_tag", None)
        context.user_data["events_page"] = 0
        return await handle_events(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞
    for tag in TAGS:
        if text.startswith(tag):
            context.user_data["selected_tag"] = tag
            context.user_data["events_page"] = 0
            return await handle_events(update, context)

    # –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
        reply_markup=get_tag_filter_keyboard_for_region(context.user_data.get("selected_tag"))
    )
    return EVENT_TAG_SELECT
def get_tag_filter_keyboard_for_region(selected_tag=None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞."""
    buttons = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
    for tag in TAGS:
        text = f"{tag} {'‚úì' if tag == selected_tag else ''}"
        buttons.append([text])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ"
    buttons.append(["–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ"])
    buttons.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞", "‚ùå –û—Ç–º–µ–Ω–∞"])

    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2."""
    if not text:
        return ""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in str(text))

def format_event_details(event):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    if not event:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

    try:
        message = f"*{escape_markdown_v2(event.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))}*\n\n"
        message += f"üìÖ –î–∞—Ç–∞: {escape_markdown_v2(event.get('event_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'))}\n"
        message += f"‚è∞ –í—Ä–µ–º—è: {escape_markdown_v2(event.get('start_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
        message += f"üìç –†–µ–≥–∏–æ–Ω: {escape_markdown_v2(event.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω'))}\n"
        message += f"üë• –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {escape_markdown_v2(event.get('creator', '–ù–µ —É–∫–∞–∑–∞–Ω'))}\n"
        # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
        if event.get("project_id"):
            project_db = ProjectModel()
            project = project_db.get_project_by_id(event.get("project_id"))
            project_info = escape_markdown_v2(project.get("name", str(event.get("project_id")))) if project else escape_markdown_v2(str(event.get("project_id")))
            message += f"\nüèóÔ∏è –ü—Ä–æ–µ–∫—Ç: {project_info}\n"

        message += f"\nüè∑Ô∏è –¢–µ–≥–∏: {escape_markdown_v2(event.get('tags', '–ù–µ —É–∫–∞–∑–∞–Ω—ã'))}\n"
        message += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {escape_markdown_v2(event.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
        message += f"\nüí∞ –ë–∞–ª–ª—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ: {event.get('participation_points', 0)}\n"
        message += f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {event.get('participants_count', 0)}\n"

        return message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"


def format_profile_message(user):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ–Ω—É—Å–∞—Ö."""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    registered_events = []
    if user.get("registered_events"):
        event_ids = [e.strip() for e in user["registered_events"].split(",") if e.strip()]
        for event_id in event_ids:
            try:
                event = event_db.get_event_by_id(int(event_id))
                if event:
                    registered_events.append(
                        f"‚Ä¢ {escape_markdown_v2(event['name'])} \\({escape_markdown_v2(event['event_date'])} {escape_markdown_v2(event['start_time'])}\\)"
                    )
            except:
                continue

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
    interests = [tag.strip() for tag in user.get("tags", "").split(",") if tag.strip()]
    interests_text = "‚Ä¢ " + "\n‚Ä¢ ".join(
        escape_markdown_v2(interest) for interest in interests) if interests else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"

    score = user.get("score", 0)
    employee_number = user.get("employee_number", "–ù–µ —É–∫–∞–∑–∞–Ω")

    reply = (
        f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞*\n\n"
        f"üìù *–ò–º—è:* {escape_markdown_v2(user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
        f"üåü *–†–æ–ª—å:* {escape_markdown_v2(user.get('role', '–í–æ–ª–æ–Ω—Ç–µ—Ä'))}\n"
        f"üèÜ *–ë–∞–ª–ª—ã:* {escape_markdown_v2(str(score))}\n"
        f"üî¢ *–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:* {escape_markdown_v2(str(employee_number))}\n"
        f"üèôÔ∏è *–†–µ–≥–∏–æ–Ω:* {escape_markdown_v2(user.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω'))}\n\n"
        f"üè∑Ô∏è *–ò–Ω—Ç–µ—Ä–µ—Å—ã:*\n{interests_text}\n\n"
    )

    if registered_events:
        reply += f"üìÖ *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:*\n" + "\n".join(registered_events)
    else:
        reply += "üìÖ *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:* –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π"

    return reply

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    user_id = update.effective_user.id
    user = user_db.get_user(user_id)
    user_role = user.get('role', 'user') if user else 'user'

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Received text in main menu: '{text}', user_role: {user_role}")

    if text == "üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞":
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞!",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD
    
    elif text in ["ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫", "ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä"]:
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò:",
            reply_markup=get_ai_chat_keyboard()
        )
        return AI_CHAT
    
    elif text == "–ú–æ–¥–µ—Ä–∞—Ü–∏—è" and user_role in ["admin", "moderator"]:
        from bot.handlers.admin import moderation_menu
        return await moderation_menu(update, context)
    
    elif text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è" and user_role == "admin":
        from bot.handlers.admin import admin_menu
        return await admin_menu(update, context)
    
    elif text.lower() == "–≤—ã—Ö–æ–¥":
        await update.message.reply_text(
            "–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard(role=user_role)
        )
        return MAIN_MENU
    
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard(role=user_role)
        )
        return MAIN_MENU


async def handle_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.message.text.strip()
    if query.lower() in ["–≤—ã—Ö–æ–¥", "–Ω–∞–∑–∞–¥", "–º–µ–Ω—é", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
        context.user_data.pop("conversation_history", None)
        await update.message.reply_text(
            "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

    if "conversation_history" not in context.user_data:
        context.user_data["conversation_history"] = []

    context.user_data["conversation_history"].append({"role": "user", "content": query})

    router_agent = ContextRouterAgent()
    response = router_agent.process_query(
        query,
        user_id=update.effective_user.id,
        conversation_history=context.user_data["conversation_history"]
    )

    context.user_data["conversation_history"].append({"role": "assistant", "content": response})

    max_length = 4096
    if len(response) > max_length:
        for i in range(0, len(response), max_length):
            await update.message.reply_markdown(response[i:i + max_length])
    else:
        await update.message.reply_markdown(response)

    return AI_CHAT

async def handle_volunteer_home(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    user_id = update.effective_user.id
    user = user_db.get_user(user_id)
    user_role = user.get("role", "user") if user else "user"
    
    if text == "–ü—Ä–æ—Ñ–∏–ª—å":
        user = user_db.get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return MAIN_MENU
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é format_profile_message –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        reply = format_profile_message(user)
        await update.message.reply_markdown_v2(reply, reply_markup=get_profile_menu_keyboard())
        return PROFILE_MENU
    elif text == "–¢–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        context.user_data["events_page"] = 0
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç–µ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if "selected_tag" in context.user_data:
            context.user_data.pop("selected_tag", None)
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        return await handle_events(update, context)
    elif text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        info_text = (
            f"*‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*\n\n"
            f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\\.\n\n"
            f"*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
            f"‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —Ç–µ–≥–∞–º\n"
            f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
            f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º\n"
            f"‚Ä¢ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤\n\n"
            f"–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \\\"–í—ã—Ö–æ–¥\\\"\\."
        )
        await update.message.reply_markdown_v2(info_text, reply_markup=get_volunteer_dashboard_keyboard())
        return VOLUNTEER_DASHBOARD
    elif text == "–ë–æ–Ω—É—Å—ã":
        user = user_db.get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return MAIN_MENU

        score = user.get("score", 0)

        reply = (
            f"üèÜ *–í–∞—à–∏ –±–æ–Ω—É—Å—ã*\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: *{escape_markdown_v2(str(score))}*\n\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–∞–ª–ª—ã\\.\n\n"
        )
        
        await update.message.reply_markdown_v2(reply, reply_markup=get_volunteer_dashboard_keyboard())
        return VOLUNTEER_DASHBOARD
    elif text == "–í–≤–µ—Å—Ç–∏ –∫–æ–¥":
        keyboard = ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:", reply_markup=keyboard)
        return EVENT_CODE_REDEEM
    elif text == "–í—ã—Ö–æ–¥":
        reply = f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!"
        await update.message.reply_text(reply, reply_markup=get_main_menu_keyboard(role=user_role))
        return MAIN_MENU
    elif text == "–õ–∏–¥–µ—Ä–±–æ—Ä–¥":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤:",
            reply_markup=get_leaderboard_region_keyboard()
        )
        return LEADERBOARD_REGION_SELECT
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return VOLUNTEER_DASHBOARD

async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    first_name = user.first_name if user.first_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_id = user.id
    telegram_tag = user.username if user.username else ""
    role = "user"
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∏–º—è, telegram_tag –∏ —Ä–æ–ª—å)
    try:
        user_db.save_user(id=user_id, first_name=first_name, telegram_tag=telegram_tag, role=role)
    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return MAIN_MENU
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:")
    return PROFILE_EMPLOYEE_NUMBER


async def handle_registration_city_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    text = update.message.text
    user_id = update.effective_user.id
    page = context.user_data.get("city_page", 0)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if page > 0:
            page -= 1
            context.user_data["city_page"] = page
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
                reply_markup=get_city_selection_keyboard(page=page)
            )
        return REGISTRATION_CITY_SELECT

    elif text == "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è":
        if (page + 1) * 3 < len(CITIES):  # 3 - —ç—Ç–æ page_size
            page += 1
            context.user_data["city_page"] = page
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
                reply_markup=get_city_selection_keyboard(page=page)
            )
        return REGISTRATION_CITY_SELECT

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    if text.split(" ‚úîÔ∏è")[0] in CITIES:  # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä –≤—ã–±–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        city = text.split(" ‚úîÔ∏è")[0]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –ë–î
        user_db.update_user_city(user_id, city)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ–≥–æ–≤
        await update.message.reply_text(
            f"–†–µ–≥–∏–æ–Ω '{city}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:",
            reply_markup=get_tag_selection_keyboard()
        )
        return REGISTRATION_TAG_SELECT

    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.",
        reply_markup=get_city_selection_keyboard(page=page)
    )
    return REGISTRATION_CITY_SELECT

async def handle_registration_tag_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    text = update.message.text
    user_id = update.effective_user.id
    selected_tags = context.user_data.get("pending_tags", [])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
    elif text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not selected_tags:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥.",
                reply_markup=get_tag_selection_keyboard(selected_tags=selected_tags)
            )
            return REGISTRATION_TAG_SELECT

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –≤ –ë–î
        user_db.update_user_tags(user_id, ",".join(selected_tags))
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await update.message.reply_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            reply_markup=get_main_menu_keyboard(role="user")
        )
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop("pending_tags", None)
        return MAIN_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞
    tag = text.split(" ‚úì")[0]  # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä –≤—ã–±–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if tag in TAGS:
        if tag in selected_tags:
            selected_tags.remove(tag)
        else:
            selected_tags.append(tag)
        context.user_data["pending_tags"] = selected_tags
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–≥–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=get_tag_selection_keyboard(selected_tags=selected_tags)
        )
        return REGISTRATION_TAG_SELECT

    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.",
        reply_markup=get_tag_selection_keyboard(selected_tags=selected_tags)
    )
    return REGISTRATION_TAG_SELECT

async def handle_profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    user_id = update.effective_user.id
    user = user_db.get_user(user_id)
    user_role = user.get("role", "user") if user else "user"

    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:", reply_markup=get_cancel_keyboard())
        return PROFILE_UPDATE_NAME
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–µ–ª—å–Ω—ã–π":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:", reply_markup=get_cancel_keyboard())
        return PROFILE_EMPLOYEE_NUMBER_UPDATE
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã":
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_tags = [tag.strip() for tag in user.get("tags", "").split(",") if tag.strip()]
        context.user_data["profile_tags"] = current_tags
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=get_tag_selection_keyboard(selected_tags=current_tags))
        return PROFILE_TAG_SELECT
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=get_city_selection_keyboard())
        return PROFILE_CITY_SELECT
    elif text == "–í—ã—Ö–æ–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_volunteer_dashboard_keyboard())
        return VOLUNTEER_DASHBOARD
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return PROFILE_MENU

async def get_profile_info(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = user_db.get_user(user_id)
    if not user:
        return "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

    return format_profile_message(user)

async def handle_contact_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    user = user_db.get_user(user_id)
    if update.message.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_profile_menu_keyboard())
        return PROFILE_MENU
    old_first_name = escape_markdown_v2(user.get("first_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
    new_first_name = escape_markdown_v2(update.message.text.strip())
    user_db.update_first_name(user_id, update.message.text.strip())
    profile_info = await get_profile_info(user_id)
    await update.message.reply_markdown_v2(
        f"‚úÖ –í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ —Å {old_first_name} –Ω–∞ {new_first_name}\\!",
        reply_markup=get_profile_menu_keyboard()
    )
    return PROFILE_MENU

async def handle_profile_tag_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    user_id = update.effective_user.id
    selected_tags = context.user_data.get("profile_tags", [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = user_db.get_user(user_id)
    old_tags = [tag.strip() for tag in user.get("tags", "").split(",") if tag.strip()]

    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not selected_tags:
            await update.message.reply_text(
                "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.",
                reply_markup=get_tag_selection_keyboard(selected_tags=selected_tags)
            )
            return PROFILE_TAG_SELECT

        user_db.update_user_tags(user_id, ",".join(selected_tags))
        profile_info = await get_profile_info(user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        old_tags_formatted = "–Ω–µ—Ç" if not old_tags else "\n".join([f"üìå {escape_markdown_v2(tag)}" for tag in old_tags])
        new_tags_formatted = "\n".join([f"üéØ {escape_markdown_v2(tag)}" for tag in selected_tags])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ç–µ–≥–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã
        added_tags = [tag for tag in selected_tags if tag not in old_tags]
        removed_tags = [tag for tag in old_tags if tag not in selected_tags]
        
        changes_summary = []
        if added_tags:
            changes_summary.extend([f"\\+ {escape_markdown_v2(tag)}" for tag in added_tags])
        if removed_tags:
            changes_summary.extend([f"\\- {escape_markdown_v2(tag)}" for tag in removed_tags])
        
        message = [
            "üîÑ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤*",
            "",
            "*–ë—ã–ª–æ:*",
            old_tags_formatted,
            "",
            "*–°—Ç–∞–ª–æ:*",
            new_tags_formatted,
            ""
        ]
        
        if changes_summary:
            message.extend([
                "*–ò–∑–º–µ–Ω–µ–Ω–∏—è:*",
                *changes_summary
            ])
            
        await update.message.reply_markdown_v2(
            "\n".join(message),
            reply_markup=get_profile_menu_keyboard()
        )
        return PROFILE_MENU
    
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_profile_menu_keyboard()
        )
        return PROFILE_MENU
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞
    for tag in TAGS:
        if text.startswith(tag):
            if tag in selected_tags:
                selected_tags.remove(tag)
            else:
                selected_tags.append(tag)
            context.user_data["profile_tags"] = selected_tags
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:",
                reply_markup=get_tag_selection_keyboard(selected_tags=selected_tags)
            )
            return PROFILE_TAG_SELECT

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.",
        reply_markup=get_tag_selection_keyboard(selected_tags=selected_tags)
    )
    return PROFILE_TAG_SELECT

async def handle_events(update, context) -> int:
    user_id = update.effective_user.id
    user = user_db.get_user(user_id)
    page = context.user_data.get("events_page", 0)
    selected_tag = context.user_data.get("selected_tag", None)
    selected_city = context.user_data.get("selected_city", None)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º message_text –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    message_text = "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:"  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if selected_city and selected_tag:
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∏ —Ç–µ–≥—É
        all_events = event_db.get_all_events()
        filtered_events = []

        for event in all_events:
            event_city = event.get("city", "")
            event_tags = event.get("tags", "").split(",")
            if event_city == selected_city and selected_tag in event_tags:
                filtered_events.append(event)

        total_events = len(filtered_events)
        start_idx = page * 4
        end_idx = start_idx + 4
        events = filtered_events[start_idx:end_idx] if start_idx < total_events else []

        message_text = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ä–µ–≥–∏–æ–Ω–µ '{selected_city}' –ø–æ –≤–∏–¥—É –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ '{selected_tag}':"

    elif selected_city:
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
        events = event_db.get_events_by_city(selected_city, limit=4, offset=page * 4)
        total_events = event_db.get_events_count_by_city(selected_city)
        message_text = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ä–µ–≥–∏–æ–Ω–µ '{selected_city}':"

    elif selected_tag:
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–≥—É
        events = event_db.get_events_by_tag(selected_tag, limit=4, offset=page * 4)
        total_events = event_db.get_events_count_by_tag(selected_tag)
        message_text = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –≤–∏–¥—É –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ '{selected_tag}':"

    else:
        # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∏–ª–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user and user.get("city"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            events = event_db.get_events_by_city(user["city"], limit=4, offset=page * 4)
            total_events = event_db.get_events_count_by_city(user["city"])

            if not events:
                # –ï—Å–ª–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
                events = event_db.get_events(limit=4, offset=page * 4)
                total_events = event_db.get_events_count()
                message_text = "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
            else:
                message_text = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ '{user['city']}':"
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            events = event_db.get_events(limit=4, offset=page * 4)
            total_events = event_db.get_events_count()
            message_text = "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"

    if not events:
        selected_city = context.user_data.get("selected_city")
        selected_tag = context.user_data.get("selected_tag")

        message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π "
        if selected_city and selected_tag:
            message += f"–≤ —Ä–µ–≥–∏–æ–Ω–µ '{selected_city}' –ø–æ –≤–∏–¥—É –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ '{selected_tag}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        elif selected_city:
            message += f"–≤ —Ä–µ–≥–∏–æ–Ω–µ '{selected_city}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        elif selected_tag:
            message += f"–ø–æ –≤–∏–¥—É –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ '{selected_tag}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            message += "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        message += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons = [
            ["üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"],
            ["üîç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω"],
            ["‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞"]
        ]
        keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

        # –û—á–∏—Å—Ç–∏–º current_events, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        context.user_data["current_events"] = []

        await update.message.reply_text(message, reply_markup=keyboard)
        return GUEST_DASHBOARD


    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    registered = []
    if user and "registered_events" in user:
        if user.get("registered_events") is not None:
            registered = [e.strip() for e in user.get("registered_events", "").split(",") if e.strip()]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        message_text,
        reply_markup=get_events_keyboard(events, page, 4, total_events, registered_events=registered)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    context.user_data["current_events"] = events
    return GUEST_DASHBOARD

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    registered = []
    if user and "registered_events" in user:
        if user.get("registered_events") is not None:
            registered = [e.strip() for e in user.get("registered_events", "").split(",") if e.strip()]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        message_text,
        reply_markup=get_events_keyboard(events, page, 4, total_events, registered_events=registered)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    context.user_data["current_events"] = events
    return GUEST_DASHBOARD


# –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_events_callbacks –≤ —Ñ–∞–π–ª–µ user.py
async def handle_events_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    user_id = update.effective_user.id
    user = user_db.get_user(user_id)
    current_events = context.user_data.get("current_events", [])

    # –ü–ï–†–ï–ú–ï–©–ê–ï–ú –≠–¢–û–¢ –ë–õ–û–ö –í –ù–ê–ß–ê–õ–û - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    for event in current_events:
        name = event.get("name")
        event_text = f"‚ú® {name}"
        if user and user.get("registered_events", "") is not None:
            if str(event['id']) in user.get("registered_events", "").split(","):
                event_text += " ‚úÖ"

        if text == event_text:
            event_details = format_event_details(event)
            is_registered = event_db.is_user_registered_for_event(user_id, str(event['id']))
            context.user_data["current_event_id"] = str(event['id'])
            await update.message.reply_markdown_v2(
                event_details,
                reply_markup=get_event_details_keyboard(event['id'], is_registered)
            )
            return EVENT_DETAILS

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    if text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã":
        context.user_data.pop("selected_tag", None)
        context.user_data.pop("selected_city", None)
        context.user_data["events_page"] = 0
        return await handle_events(update, context)

    elif text == "üîç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω":
        context.user_data.pop("selected_tag", None)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=get_events_city_filter_keyboard(context.user_data.get("selected_city"))
        )
        return GUEST_DASHBOARD

    elif text == "‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    if not current_events:
        await update.message.reply_text(
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞.",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥...
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        page = context.user_data.get("events_page", 0)
        if page > 0:
            context.user_data["events_page"] = page - 1
            return await handle_events(update, context)

    elif text == "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è":
        page = context.user_data.get("events_page", 0)
        context.user_data["events_page"] = page + 1
        return await handle_events(update, context)

    elif text == "üîç –†–µ–≥–∏–æ–Ω—ã":
        context.user_data.pop("selected_tag", None)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=get_events_city_filter_keyboard(context.user_data.get("selected_city"))
        )
        return GUEST_DASHBOARD

    elif text == "‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º current_events —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–¥–Ω–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ
    if not current_events:
        # –í–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD


    elif text == "üîç –†–µ–≥–∏–æ–Ω—ã":
        context.user_data.pop("selected_tag", None)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=get_events_city_filter_keyboard(context.user_data.get("selected_city"))
        )
        return GUEST_DASHBOARD

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await handle_events(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
    elif text == "‚ùå –í—ã—Ö–æ–¥":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    for city in CITIES:
        if text.startswith(city):
            context.user_data["selected_city"] = city
            context.user_data.pop("selected_tag", None)
            context.user_data["events_page"] = 0

            # –í–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏
            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω: {city}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ:",
                reply_markup=get_tag_filter_keyboard_for_region()
            )
            return EVENT_TAG_SELECT

    return GUEST_DASHBOARD

async def handle_profile_city_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    user_id = update.effective_user.id
    page = context.user_data.get("city_page", 0)

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_profile_menu_keyboard()
        )
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop("city_page", None)
        return PROFILE_MENU

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if page > 0:
            page -= 1
            context.user_data["city_page"] = page
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
                reply_markup=get_city_selection_keyboard(page=page)
            )
        return PROFILE_CITY_SELECT

    elif text == "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è":
        if (page + 1) * 3 < len(CITIES):  # 3 - —ç—Ç–æ page_size
            page += 1
            context.user_data["city_page"] = page
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
                reply_markup=get_city_selection_keyboard(page=page)
            )
        return PROFILE_CITY_SELECT

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    for city in CITIES:
        if text.startswith(city):
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –≥–æ—Ä–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = user_db.get_user(user_id)
            old_city = escape_markdown_v2(user.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
            escaped_city = escape_markdown_v2(city)
            
            # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user_db.update_user_city(user_id, city)
            
            await update.message.reply_markdown_v2(
                f"‚úÖ –í–∞—à —Ä–µ–≥–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —Å {old_city} –Ω–∞ {escaped_city}\\!",
                reply_markup=get_profile_menu_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop("city_page", None)
            return PROFILE_MENU

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞.",
        reply_markup=get_city_selection_keyboard(page=page)
    )
    return PROFILE_CITY_SELECT

async def handle_moderation_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        from bot.keyboards import get_main_menu_keyboard
        user_record = user_db.get_user(update.effective_user.id)
        role = user_record.get("role") if user_record else "user"
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard(role=role))
        return MAIN_MENU

    from bot.keyboards import get_mod_menu_keyboard
    await update.message.reply_text("–ú–µ–Ω—é –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_mod_menu_keyboard())
    return MOD_MENU


async def handle_code_redemption(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    text = update.message.text
    user_id = update.effective_user.id

    keyboard = ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–í–≤–æ–¥ –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD

    try:
        events = event_db.get_all_events()
        found_event = None
        for event in events:
            if event.get("code") == text:
                found_event = event
                break

        if not found_event:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
                reply_markup=keyboard
            )
            return EVENT_CODE_REDEEM

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ

        if event_db.is_user_registered_for_event(user_id, str(found_event['id'])):
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
            user = user_db.get_user(user_id)
            points = found_event.get("participation_points", 0)
            current_score = user.get("score", 0)
            user_db.update_user_score(user_id, current_score + points)
            event_db.mark_event_completed(user_id, str(found_event['id']))

            await update.message.reply_markdown(
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: *{found_event['name']}*\n"
                f"–ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: *{points}*\n"
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{current_score + points}* –±–∞–ª–ª–æ–≤",
                reply_markup=get_volunteer_dashboard_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.",
                reply_markup=get_volunteer_dashboard_keyboard()
            )
            return MAIN_MENU

        return MAIN_MENU

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD

async def handle_employee_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    employee_number_str = update.message.text.strip()
    if not (employee_number_str.isdigit() and len(employee_number_str)):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return PROFILE_EMPLOYEE_NUMBER
    employee_number = int(employee_number_str)
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–±–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
    user_db.update_user_employee_number(user_id=user_id, employee_number=employee_number)
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", reply_markup=get_city_selection_keyboard())
    return REGISTRATION_CITY_SELECT

async def update_to_state(query, text: str, reply_markup=None):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è query, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
    """
    try:
        # –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(text, reply_markup=reply_markup)

async def handle_event_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    user_id = update.effective_user.id
    event_id = context.user_data.get("current_event_id")

    if not event_id:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É":
        context.user_data.pop("current_event_id", None)
        return await handle_events(update, context)

    elif text == "‚ùå –í—ã—Ö–æ–¥":
        context.user_data.pop("current_event_id", None)
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD

    elif text == "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        user = user_db.get_user(user_id)
        event = event_db.get_event_by_id(int(event_id))
        
        if not event:
            await update.message.reply_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return VOLUNTEER_DASHBOARD

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if event_db.is_user_registered_for_event(user_id, event_id):
            await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
            return EVENT_DETAILS

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            if user.get("registered_events", "") is not None:
                registered_events = user.get("registered_events", "").split(",")
                registered_events = [e.strip() for e in registered_events if e.strip()]
                registered_events.append(str(event_id))
                user_db.update_user_registered_events(user_id, ",".join(registered_events))
            else:
                registered_events = user.get("registered_events", "")
                registered_events = str(event_id)
                user_db.update_user_registered_events(user_id, registered_events)

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if not event_db.increment_event_participants_count(int(event_id)):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}")
            
            await update.message.reply_text(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event.get('name')}\"!"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        
        return EVENT_DETAILS

    elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        user = user_db.get_user(user_id)
        event = event_db.get_event_by_id(int(event_id))
        
        if not event:
            await update.message.reply_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return VOLUNTEER_DASHBOARD

        try:
            # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            registered_events = user.get("registered_events", "").split(",")
            registered_events = [e.strip() for e in registered_events if e.strip() and e != str(event_id)]
            user_db.update_user_registered_events(user_id, ",".join(registered_events))
            
            # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if not event_db.decrement_event_participants_count(int(event_id)):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}")
            
            await update.message.reply_text(
                f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event.get('name')}\" –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        
        return EVENT_DETAILS

    return EVENT_DETAILS


async def handle_leaderboard_region_select(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞."""
    text = update.message.text

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞.",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã–º
    if text in CITIES:
        context.user_data["selected_leaderboard_region"] = text
        return await show_leaderboard(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=get_leaderboard_region_keyboard()
        )
        return LEADERBOARD_REGION_SELECT


async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É."""
    selected_region = context.user_data.get("selected_leaderboard_region")

    if not selected_region:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–ª–ª–∞–º
        users = user_db.get_all_users()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–ª–∞–º
        region_users = [user for user in users if user.get("city") == selected_region]
        region_users.sort(key=lambda x: x.get("score", 0), reverse=True)

        if not region_users:
            await update.message.reply_markdown_v2(
                f"*üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞*\n\n"
                f"_{escape_markdown_v2(selected_region)}_\n\n"
                f"–í —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ —Å –±–∞–ª–ª–∞–º–∏\\."
            )
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            message = [
                f"*üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞*\n",
                f"_{escape_markdown_v2(selected_region)}_\n\n"
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-10 –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 10)
            top_limit = min(10, len(region_users))
            for i, user in enumerate(region_users[:top_limit], 1):
                name = escape_markdown_v2(user.get("first_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
                score = user.get("score", 0)

                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∞–ª–∏ –¥–ª—è —Ç–æ–ø-3
                medal = ""
                if i == 1:
                    medal = "ü•á "
                elif i == 2:
                    medal = "ü•à "
                elif i == 3:
                    medal = "ü•â "

                message.append(f"{medal}*{i}\\. {name}* \\- {score} –±–∞–ª–ª–æ–≤")

            await update.message.reply_markdown_v2("\n".join(message))

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_volunteer_dashboard_keyboard()
        )
        return VOLUNTEER_DASHBOARD

async def handle_employee_number_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    employee_number_str = update.message.text.strip()
    if not (employee_number_str.isdigit() and len(employee_number_str)):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.", reply_markup=get_cancel_keyboard())
        return PROFILE_EMPLOYEE_NUMBER_UPDATE
    employee_number = int(employee_number_str)
    user_db.update_user_employee_number(user_id=user_id, employee_number=employee_number)
    await update.message.reply_text("–í–∞—à —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.", reply_markup=get_profile_menu_keyboard())
    return PROFILE_MENU
