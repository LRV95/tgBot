"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥."""

import os
import csv
import openpyxl
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from bot.states import MAIN_MENU, WAIT_FOR_CSV, WAIT_FOR_EVENTS_CSV
from database.db import Database
import logging

logger = logging.getLogger(__name__)

db = Database()

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if user_record and user_record.get("role") == "admin":
        await update.message.reply_markdown_v2(
            "*üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\!* –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ `/load_excel` \\- –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel\n"
            "‚Ä¢ `/set_admin <user_id>` \\- –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ `/set_moderator <user_id>` \\- –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ `/delete_user <user_id>` \\- —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ `/find_user_id <user_id>` \\- –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id\n"
            "‚Ä¢ `/find_users_name <name>` \\- –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏\n"
            "‚Ä¢ `/find_users_email <email>` \\- –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email\n"
            "‚Ä¢ `/delete_me` \\- —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
            "‚Ä¢ `/ai_query <query>` \\- –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò\n"
            "‚Ä¢ `/search_projects_tag <tag>` \\- –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —Ç–µ–≥—É\n"
            "‚Ä¢ `/search_projects_name <name>` \\- –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚Ä¢ `/search_events_tag <tag>` \\- –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —Ç–µ–≥—É\n"
            "‚Ä¢ `/search_events_project <project name>` \\- –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –ø—Ä–æ–µ–∫—Ç—É\n"
            "‚Ä¢ `/load_projects_csv` \\- –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n"
            "‚Ä¢ `/load_events_csv` \\- –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"
        )
    else:
        await update.message.reply_markdown_v2("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\.*")

async def load_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /load_excel."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not (user_record and user_record.get("role") == "admin"):
        await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.*")
        return
    try:
        workbook = openpyxl.load_workbook("./data/events.xlsx")
        sheet = workbook.active
        count = 0
        for row in sheet.iter_rows(min_row=2, values_only=True):
            name, date, time_value, location, curator, description, code, tags = row
            if not name:
                continue
            db.add_project(name, curator, time_value, location, description, tags)
            count += 1
        await update.message.reply_markdown(f"*‚úÖ Excel —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.* –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: _{count}_.")
    except Exception as e:
        await update.message.reply_markdown("*üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞.*")

async def set_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_admin."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not (user_record and user_record.get("role") == "admin"):
        await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.*")
        return
    try:
        target_user_id = int(context.args[0])
        db.update_user_role(target_user_id, "admin")
        await update.message.reply_markdown(f"*‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.*")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_admin <user_id>*")

async def set_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_moderator."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not (user_record and user_record.get("role") == "admin"):
        await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.*")
        return
    try:
        target_user_id = int(context.args[0])
        db.update_user_role(target_user_id, "moderator")
        await update.message.reply_markdown(f"*‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.*")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_moderator <user_id>*")

async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_user."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not (user_record and user_record.get("role") in ["admin", "moderator"]):
        await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.*")
        return
    try:
        target_user_id = int(context.args[0])
        db.delete_user(target_user_id)
        await update.message.reply_markdown(f"*‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–¥–∞–ª–µ–Ω.*")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_user <user_id>*")

async def find_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_user_id."""
    try:
        target_user_id = int(context.args[0])
        user = db.find_user_by_id(target_user_id)
        if user is None:
            await update.message.reply_markdown("*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*")
        else:
            await update.message.reply_markdown(f"*üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:*\n{user}")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find_user_id <user_id>*")

async def find_users_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_users_name."""
    try:
        name = " ".join(context.args)
        users = db.find_users_by_name(name)
        if not users:
            await update.message.reply_markdown("*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*")
        else:
            message = "*üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            for user in users:
                message += f"ID: {user['id']}, –ò–º—è: {user['first_name']} {user['last_name']}\n"
            await update.message.reply_markdown(message)
    except Exception:
        await update.message.reply_markdown("*üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏.*")

async def find_users_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_users_email."""
    try:
        email = " ".join(context.args)
        users = db.find_users_by_email(email)
        if not users:
            await update.message.reply_markdown("*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*")
        else:
            message = "*üìß –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            for user in users:
                message += f"ID: {user['id']}, Email: {user['email']}\n"
            await update.message.reply_markdown(message)
    except Exception:
        await update.message.reply_markdown("*üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email.*")

async def load_projects_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /load_projects_csv."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not (user_record and user_record.get("role") == "admin"):
        await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.*")
        return MAIN_MENU
    await update.message.reply_markdown("*üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv).*")
    return WAIT_FOR_CSV

async def process_csv_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏."""
    try:
        file = await context.bot.get_file(update.message.document.file_id)
        data_folder = os.path.join(".", "data")
        if not os.path.exists(data_folder):
            os.makedirs(data_folder)
        temp_path = os.path.join(data_folder, update.message.document.file_name)
        await file.download_to_drive(custom_path=temp_path)
        count = 0
        with open(temp_path, newline="", encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                name = row.get("–ü—Ä–æ–µ–∫—Ç")
                curator = row.get("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π")
                phone_number = row.get("–¢–µ–ª–µ—Ñ–æ–Ω")
                email = row.get("–ü–æ—á—Ç–∞")
                description = row.get("–°—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞")
                tags = row.get("–¢–µ–≥–∏", "")
                if not name:
                    continue
                db.add_project(name, curator, phone_number, email, description, tags)
                count += 1
        os.remove(temp_path)
        await update.message.reply_markdown(f"*‚úÖ CSV —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.* –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: _{count}_.")
    except Exception as e:
        await update.message.reply_markdown("*üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞.*")
    return MAIN_MENU

async def load_events_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /load_events_csv."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not (user_record and user_record.get("role") == "admin"):
        await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.*")
        return MAIN_MENU
    await update.message.reply_markdown("*üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv).*")
    return WAIT_FOR_EVENTS_CSV

async def process_events_csv_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏."""
    try:
        file = await context.bot.get_file(update.message.document.file_id)
        data_folder = os.path.join(".", "data")
        if not os.path.exists(data_folder):
            os.makedirs(data_folder)
        temp_path = os.path.join(data_folder, update.message.document.file_name)
        await file.download_to_drive(custom_path=temp_path)
        count = 0
        with open(temp_path, newline="", encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                name = row.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "")
                event_date = row.get("–î–∞—Ç–∞", "")
                start_time = row.get("–í—Ä–µ–º—è", "")
                location = row.get("–õ–æ–∫–∞—Ü–∏—è", "")
                creator = row.get("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "")
                description = row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–Ω–Ω–æ—Å—Ç—å) –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                try:
                    participation_points = int(row.get("–¶–µ–Ω–Ω–æ—Å—Ç—å", "100").strip())
                except (ValueError, TypeError):
                    participation_points = 100  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                if not name or not event_date or not start_time or not location or not creator:
                    continue
                
                # TODO: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞
                # –¢–µ–≥–∏ –±—É–¥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤ bot/constants.py
                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                tags = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}; –õ–æ–∫–∞—Ü–∏—è: {location}; –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                try:
                    db.add_event_detail(
                        project_id=None, 
                        event_date=event_date, 
                        start_time=start_time, 
                        participants_count=0, 
                        participation_points=participation_points, 
                        creator=creator, 
                        tags=tags,
                        location=location
                    )
                    count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
                    
        os.remove(temp_path)
        await update.message.reply_markdown(f"*‚úÖ CSV —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.* –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: _{count}_.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏: {e}")
        await update.message.reply_markdown("*üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏.*")
    return MAIN_MENU
