"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥."""

import os
import csv
import openpyxl
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import logging
from bot.constants import CITIES, TAGS
from bot.keyboards import get_moderation_menu_keyboard
from database.db import Database
from bot.states import (MAIN_MENU, MODERATOR_SEARCH_REGISTERED_USERS, WAIT_FOR_CSV, WAIT_FOR_EVENTS_CSV, MODERATION_MENU, MODERATOR_EVENT_NAME,
                        MODERATOR_EVENT_DATE, MODERATOR_EVENT_TIME, MODERATOR_EVENT_CITY, MODERATOR_EVENT_DESCRIPTION,
                        MODERATOR_EVENT_CONFIRMATION, MODERATOR_EVENT_PARTICIPATION_POINTS, MODERATOR_EVENT_TAGS,
                        MODERATOR_EVENT_CREATOR, MODERATOR_EVENT_CODE)
from datetime import datetime

logger = logging.getLogger(__name__)

db = Database()

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if user_record and user_record.get("role") == "admin":
        await update.message.reply_markdown_v2(
            "*üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\!* –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ `/load_excel` \\- –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel\n"
            "‚Ä¢ `/set_admin <user_id>` \\- –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ `/set_moderator <user_id>` \\- –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ `/delete_user <user_id>` \\- —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ `/find_user_id <user_id>` \\- –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id\n"
            "‚Ä¢ `/find_users_name <name>` \\- –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏\n"
            "‚Ä¢ `/find_users_email <email>` \\- –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email\n"
            "‚Ä¢ `/delete_me` \\- —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
            "‚Ä¢ `/ai_query <query>` \\- –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò\n"
            "‚Ä¢ `/search_projects_tag <tag>` \\- –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —Ç–µ–≥—É\n"
            "‚Ä¢ `/search_projects_name <name>` \\- –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚Ä¢ `/search_events_tag <tag>` \\- –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —Ç–µ–≥—É\n"
            "‚Ä¢ `/search_events_project <project name>` \\- –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –ø—Ä–æ–µ–∫—Ç—É\n"
            "‚Ä¢ `/load_projects_csv` \\- –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n"
            "‚Ä¢ `/load_events_csv` \\- –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"
        )
    else:
        await update.message.reply_markdown_v2("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\.*")

async def load_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /load_excel."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not (user_record and user_record.get("role") == "admin"):
        await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.*")
        return
    try:
        workbook = openpyxl.load_workbook("./data/events.xlsx")
        sheet = workbook.active
        count = 0
        for row in sheet.iter_rows(min_row=2, values_only=True):
            name, date, time_value, location, curator, description, code, tags = row
            if not name:
                continue
            db.add_project(name, curator, time_value, location, description, tags)
            count += 1
        await update.message.reply_markdown(f"*‚úÖ Excel —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.* –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: _{count}_.")
    except Exception as e:
        await update.message.reply_markdown("*üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞.*")

async def set_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_admin."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not (user_record and user_record.get("role") == "admin"):
        await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.*")
        return
    try:
        target_user_id = int(context.args[0])
        db.update_user_role(target_user_id, "admin")
        await update.message.reply_markdown(f"*‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.*")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_admin <user_id>*")

async def set_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_moderator."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not (user_record and user_record.get("role") == "admin"):
        await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.*")
        return
    try:
        target_user_id = int(context.args[0])
        db.update_user_role(target_user_id, "moderator")
        await update.message.reply_markdown(f"*‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.*")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_moderator <user_id>*")

async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_user."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not (user_record and user_record.get("role") in ["admin", "moderator"]):
        await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.*")
        return
    try:
        target_user_id = int(context.args[0])
        db.delete_user(target_user_id)
        await update.message.reply_markdown(f"*‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–¥–∞–ª–µ–Ω.*")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_user <user_id>*")

async def find_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_user_id."""
    try:
        target_user_id = int(context.args[0])
        user = db.find_user_by_id(target_user_id)
        if user is None:
            await update.message.reply_markdown("*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*")
        else:
            await update.message.reply_markdown(f"*üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:*\n{user}")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find_user_id <user_id>*")

async def find_users_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_users_name."""
    try:
        name = " ".join(context.args)
        users = db.find_users_by_name(name)
        if not users:
            await update.message.reply_markdown("*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*")
        else:
            message = "*üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            for user in users:
                message += f"ID: {user['id']}, –ò–º—è: {user['first_name']} {user['last_name']}\n"
            await update.message.reply_markdown(message)
    except Exception:
        await update.message.reply_markdown("*üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏.*")

async def find_users_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_users_email."""
    try:
        email = " ".join(context.args)
        users = db.find_users_by_email(email)
        if not users:
            await update.message.reply_markdown("*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*")
        else:
            message = "*üìß –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            for user in users:
                message += f"ID: {user['id']}, Email: {user['email']}\n"
            await update.message.reply_markdown(message)
    except Exception:
        await update.message.reply_markdown("*üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email.*")

async def load_projects_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /load_projects_csv."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not (user_record and user_record.get("role") == "admin"):
        await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.*")
        return MAIN_MENU
    await update.message.reply_markdown("*üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv).*")
    return WAIT_FOR_CSV

async def process_csv_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏."""
    try:
        file = await context.bot.get_file(update.message.document.file_id)
        data_folder = os.path.join(".", "data")
        if not os.path.exists(data_folder):
            os.makedirs(data_folder)
        temp_path = os.path.join(data_folder, update.message.document.file_name)
        await file.download_to_drive(custom_path=temp_path)
        count = 0
        with open(temp_path, newline="", encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                name = row.get("–ü—Ä–æ–µ–∫—Ç")
                curator = row.get("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π")
                phone_number = row.get("–¢–µ–ª–µ—Ñ–æ–Ω")
                email = row.get("–ü–æ—á—Ç–∞")
                description = row.get("–°—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞")
                tags = row.get("–¢–µ–≥–∏", "")
                if not name:
                    continue
                db.add_project(name, curator, phone_number, email, description, tags)
                count += 1
        os.remove(temp_path)
        await update.message.reply_markdown(f"*‚úÖ CSV —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.* –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: _{count}_.")
    except Exception as e:
        await update.message.reply_markdown("*üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞.*")
    return MAIN_MENU

async def load_events_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /load_events_csv."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not (user_record and user_record.get("role") == "admin"):
        await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.*")
        return MAIN_MENU
    await update.message.reply_markdown("*üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv).*")
    return WAIT_FOR_EVENTS_CSV

async def process_events_csv_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏."""
    try:
        file = await context.bot.get_file(update.message.document.file_id)
        data_folder = os.path.join(".", "data")
        if not os.path.exists(data_folder):
            os.makedirs(data_folder)
        temp_path = os.path.join(data_folder, update.message.document.file_name)
        await file.download_to_drive(custom_path=temp_path)
        count = 0
        await update.message.reply_markdown("*üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSV —Ñ–∞–π–ª —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏...*")
        with open(temp_path, newline="", encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                name = row.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "")
                event_date = row.get("–î–∞—Ç–∞", "")
                start_time = row.get("–í—Ä–µ–º—è", "")
                city = row.get("–õ–æ–∫–∞—Ü–∏—è", "")
                creator = row.get("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "")
                description = row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "")
                participation_points = row.get("–¶–µ–Ω–Ω–æ—Å—Ç—å", "")
                tags = row.get("–¢–µ–≥–∏", "")
                code = row.get("–ö–æ–¥", "")
                owner = "admin"
                
                if participation_points == "":
                    participation_points = 5
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                try:
                    db.add_event(
                        name=name,
                        event_date=event_date, 
                        start_time=start_time, 
                        city=city,
                        creator=creator,
                        description=description,
                        participation_points=int(participation_points),
                        tags=tags,
                        code=code,
                        owner=owner
                    )
                    count += 1
                    await update.message.reply_markdown(f"*‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.*")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
                    
        os.remove(temp_path)
        await update.message.reply_markdown(f"*‚úÖ CSV —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.* –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: _{count}_.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏: {e}")
        await update.message.reply_markdown("*üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏.*")
    return MAIN_MENU

async def moderation_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_record = db.get_user(user.id)
    if user_record and user_record.get("role") in ["admin", "moderator"]:
        await update.message.reply_text("–ú–µ–Ω—é –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_moderation_menu_keyboard())
        return MODERATION_MENU
    else:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –º–µ–Ω—é.")
        return MAIN_MENU


async def handle_moderation_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
    text = update.message.text
    
    if text == "–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        return MODERATOR_EVENT_NAME
        
    elif text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        return await moderator_view_events(update, context)
        
    elif text == "–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
        return await moderator_delete_event(update, context)
        
    elif text == "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        return MODERATOR_SEARCH_REGISTERED_USERS
        
    elif text == "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π":
        return await moderator_list_all_events(update, context)
        
    elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        from bot.keyboards import get_main_menu_keyboard
        user_record = db.get_user(update.effective_user.id)
        role = user_record.get("role") if user_record else "user"
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard(role=role)
        )
        return MAIN_MENU
        
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
            reply_markup=get_moderation_menu_keyboard()
        )
        return MODERATION_MENU

async def moderator_create_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not user_record or user_record.get("role") not in ["admin", "moderator"]:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        return MAIN_MENU
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    return MODERATOR_EVENT_NAME

async def moderator_handle_event_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["event_name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")
    return MODERATOR_EVENT_DATE

async def moderator_handle_event_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["event_date"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ß–ß:–ú–ú):")
    return MODERATOR_EVENT_TIME

async def moderator_handle_event_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["event_time"] = update.message.text.strip()
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {', '.join(CITIES)}.")
    return MODERATOR_EVENT_CITY

async def moderator_handle_event_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["event_city"] = update.message.text.strip()
    if context.user_data["event_city"] not in CITIES:
        await update.message.reply_text(f"–õ–æ–∫–∞—Ü–∏—è {context.user_data['event_city']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return MODERATOR_EVENT_CITY
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    return MODERATOR_EVENT_CREATOR

async def moderator_handle_event_creator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["event_creator"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    return MODERATOR_EVENT_DESCRIPTION

async def moderator_handle_event_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["event_description"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    return MODERATOR_EVENT_PARTICIPATION_POINTS

async def moderator_handle_event_participation_points(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["event_participation_points"] = update.message.text.strip()
    if not context.user_data["event_participation_points"].isdigit():
        await update.message.reply_text("–¶–µ–Ω–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return MODERATOR_EVENT_PARTICIPATION_POINTS
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤: {', '.join(TAGS)}.")
    return MODERATOR_EVENT_TAGS

async def moderator_handle_event_tags(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["event_tags"] = update.message.text.replace(" ", "")
    if not all(tag in TAGS for tag in context.user_data["event_tags"].split(",")):
        await update.message.reply_text(f"–¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤: {', '.join(TAGS)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return MODERATOR_EVENT_TAGS
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–æ–¥–∏–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
    return MODERATOR_EVENT_CODE

async def moderator_handle_event_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["event_code"] = update.message.text.strip()
    summary = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {context.user_data['event_name']}\n"
        f"–î–∞—Ç–∞: {context.user_data['event_date']}\n"
        f"–í—Ä–µ–º—è: {context.user_data['event_time']}\n"
        f"–õ–æ–∫–∞—Ü–∏—è: {context.user_data['event_city']}\n"
        f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {context.user_data['event_creator']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data['event_description']}\n"
        f"–¶–µ–Ω–Ω–æ—Å—Ç—å: {context.user_data['event_participation_points']}\n"
        f"–¢–µ–≥–∏: {context.user_data['event_tags']}\n"
        f"–ö–æ–¥: {context.user_data['event_code']}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è? (–î–∞/–ù–µ—Ç)"
    )
    await update.message.reply_text(summary)
    return MODERATOR_EVENT_CONFIRMATION


async def moderator_confirm_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    response = update.message.text.strip().lower()
    if response not in ["–¥–∞", "yes"]:
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return MODERATION_MENU
    user = update.effective_user
    event_name = context.user_data.get("event_name")
    event_date = context.user_data.get("event_date")
    event_time = context.user_data.get("event_time")
    event_city = context.user_data.get("event_city")
    event_creator = context.user_data.get("event_creator")
    event_description = context.user_data.get("event_description")
    event_participation_points = context.user_data.get("event_participation_points")
    event_tags = context.user_data.get("event_tags")
    event_code = context.user_data.get("event_code")
    owner = f"moderator:{user.id}"
    try:
        db.add_event(
            name=event_name,
            event_date=event_date,
            start_time=event_time,
            city=event_city,
            creator=event_creator,
            description=event_description,
            participation_points=event_participation_points,
            tags=event_tags,
            code=event_code,
            owner=owner
        )
        await update.message.reply_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for key in ["event_name", "event_date", "event_time", "event_city", "event_description", "event_code", "event_participation_points", "event_tags", "event_creator"]:
        context.user_data.pop(key, None)
    return MODERATION_MENU

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
async def moderator_view_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º, —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not user_record or user_record.get("role") not in ["admin", "moderator"]:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return MAIN_MENU

    # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ - —Ç–æ–ª—å–∫–æ –µ–≥–æ
    if user_record.get("role") == "admin":
        events = db.get_all_events()
    else:
        owner_str = f"moderator:{user.id}"
        events = [event for event in db.get_all_events() if event.get("owner") == owner_str]

    if not events:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return MODERATION_MENU
    keyboard = []
    for event in events:
        button_text = f"{event['name']} ({event.get('event_date')})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"view_event_users:{event['id']}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=reply_markup)
    return MODERATION_MENU

async def moderator_handle_view_event_users_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    await query.answer()
    event_id = query.data.split(":", 1)[1]
    users = db.get_users_for_event(event_id)
    if not users:
        await query.edit_message_text("–ù–∞ –¥–∞–Ω–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        message = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        for u in users:
            message += f"ID: {u['id']}, –ò–º—è: {u['first_name']}\n"
        await query.edit_message_text(message)
    return MODERATION_MENU

async def moderator_delete_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not user_record or user_record.get("role") not in ["admin", "moderator"]:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return MAIN_MENU

    # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ - —Ç–æ–ª—å–∫–æ –µ–≥–æ
    if user_record.get("role") == "admin":
        events = db.get_all_events()
    else:
        creator_str = f"moderator:{user.id}"
        events = [event for event in db.get_all_events() if event.get("creator") == creator_str]

    if not events:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return MODERATION_MENU
    keyboard = []
    for event in events:
        button_text = f"{event['name']} ({event.get('event_date')})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"delete_event:{event['id']}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    return MODERATION_MENU

async def moderator_handle_delete_event_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ callback_data
    event_id = int(query.data.split(":", 1)[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    user_record = db.get_user(user.id)
    if not user_record or user_record.get("role") not in ["admin", "moderator"]:
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return MODERATION_MENU

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    event = db.get_event_by_id(event_id)
    if not event:
        await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return MODERATION_MENU

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    if user_record.get("role") == "moderator" and event.get("owner") != f"moderator:{user.id}":
        await query.edit_message_text("üö´ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        return MODERATION_MENU

    try:
        # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        db.delete_event(event_id)
        await query.edit_message_text(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event.get('name')}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    
    return MODERATION_MENU

async def moderator_handle_search_event_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    event_id_text = update.message.text.strip()
    try:
        event_id = int(event_id_text)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return MODERATOR_SEARCH_REGISTERED_USERS

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –ø–æ –µ–≥–æ ID
    event = db.get_event_by_id(event_id)
    if not event:
        await update.message.reply_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return MODERATION_MENU

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ –ø–æ–ª—è tags
    name = event.get("name")
    code = event.get("code")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∫–æ–¥–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    message = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {name}"
    message += f" (–ö–æ–¥: {code})"
    message += "\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    users = db.get_users_for_event(event_id)
    if not users:
        message += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        for u in users:
            message += f"ID: {u['id']}, –ò–º—è: {u['first_name']}\n"
    await update.message.reply_text(message)
    return MODERATION_MENU

async def moderator_search_event_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    return MODERATOR_SEARCH_REGISTERED_USERS

async def moderator_list_all_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    events = db.get_all_events()
    if not events:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return MODERATION_MENU

    message_lines = []
    for event in events:
        id = event.get("id")
        name = event.get("name")
        code = event.get("code")

        message_lines.append(f"ID: {id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {name} (–ö–æ–¥: {code})")


    message_text = "\n".join(message_lines)
    await update.message.reply_text(message_text)
    return MODERATION_MENU
