"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥."""

import os
import csv
import openpyxl
import logging
from config         import ADMIN_ID
from database       import UserModel, EventModel
from datetime       import datetime
from functools      import wraps
from bot.constants  import CITIES, TAGS
from telegram       import ReplyKeyboardRemove, Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext   import ContextTypes, ConversationHandler
from bot.keyboards  import (get_admin_menu_keyboard, get_mod_menu_keyboard, get_city_selection_keyboard, get_tag_selection_keyboard,
                           get_cancel_keyboard, get_city_selection_keyboard_with_cancel, get_tag_selection_keyboard_with_cancel,
                           get_confirm_keyboard, get_csv_export_menu_keyboard)
from bot.states     import (ADMIN_MENU, MAIN_MENU, MOD_EVENT_DELETE, MOD_EVENT_USERS, ADMIN_SET_ADMIN, EVENT_CSV_IMPORT,
                            ADMIN_DELETE_USER, EVENT_CSV_UPLOAD, MOD_MENU, MOD_EVENT_NAME,
                            MOD_EVENT_DATE, MOD_EVENT_TIME, MOD_EVENT_CITY, MOD_EVENT_DESCRIPTION,
                            MOD_EVENT_CONFIRM, MOD_EVENT_POINTS, MOD_EVENT_TAGS,
                            MOD_EVENT_CREATOR, MOD_EVENT_CODE, ADMIN_FIND_USER_ID, ADMIN_FIND_USER_NAME,
                            ADMIN_SET_MODERATOR, CSV_EXPORT_MENU, EVENT_REPORT_CREATE, EVENT_REPORT_PARTICIPANTS,
                            EVENT_REPORT_PHOTOS, EVENT_REPORT_SUMMARY, EVENT_REPORT_FEEDBACK)

logger = logging.getLogger(__name__)

user_db = UserModel()
event_db = EventModel()

def role_required(*allowed_roles):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –†–∞–∑—Ä–µ—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏.
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user = update.effective_user
            user_record = user_db.get_user(user.id)
            user_role = user_record.get("role") if user_record else None
            
            if not user_role or user_role not in allowed_roles:
                await update.message.reply_markdown("*üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ\\.*")
                return MAIN_MENU
                
            return await func(update, context)
        return wrapper
    return decorator

@role_required("admin")
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
    await update.message.reply_markdown_v2(
        "*üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\!* –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ `/load_excel` \\- –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel\n"
        "‚Ä¢ `/set_admin <user_id>` \\- –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "‚Ä¢ `/set_moderator <user_id>` \\- –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
        "‚Ä¢ `/delete_user <user_id>` \\- —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ `/find_user_id <user_id>` \\- –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id\n"
        "‚Ä¢ `/find_users_name <name>` \\- –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏\n"
        "‚Ä¢ `/find_users_email <email>` \\- –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email\n"
        "‚Ä¢ `/delete_me` \\- —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
        "‚Ä¢ `/ai_query <query>` \\- –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò\n"
        "‚Ä¢ `/search_events_tag <tag>` \\- –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —Ç–µ–≥—É\n"
        "‚Ä¢ `/load_events_csv` \\- –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"
    )

@role_required("admin")
async def set_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_admin."""
    try:
        target_user_id = int(context.args[0])
        user_db.update_user_role(target_user_id, "admin")
        await update.message.reply_markdown(f"*‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.*")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_admin <user_id>*")

@role_required("admin")
async def unset_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unset_admin."""
    try:
        target_user_id = int(context.args[0])
        user_db.update_user_role(target_user_id, "user")
        await update.message.reply_markdown(f"*‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.*")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unset_admin <user_id>*")

@role_required("admin")
async def set_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_moderator."""
    try:
        target_user_id = int(context.args[0])
        user_db.update_user_role(target_user_id, "moderator")
        await update.message.reply_markdown(f"*‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.*")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_moderator <user_id>*")

@role_required("admin", "moderator")
async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_user."""
    try:
        target_user_id = int(context.args[0])
        if target_user_id in ADMIN_ID:
            await update.message.reply_markdown("*üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.*")
            return
        user_db.delete_user(target_user_id)
        await update.message.reply_markdown(f"*‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–¥–∞–ª–µ–Ω.*")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_user <user_id>*")

@role_required("admin", "moderator")
async def find_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_user_id."""
    try:
        target_user_id = int(context.args[0])
        user = user_db.find_user_by_id(target_user_id)
        if user is None:
            await update.message.reply_markdown("*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*")
        else:
            await update.message.reply_markdown(f"*üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:*\n{user}")
    except (IndexError, ValueError):
        await update.message.reply_markdown("*‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find_user_id <user_id>*")

@role_required("admin", "moderator")
async def find_users_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_users_name."""
    try:
        name = " ".join(context.args)
        users = user_db.find_users_by_name(name)
        if not users:
            await update.message.reply_markdown("*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*")
        else:
            message = "*üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            for user in users:
                message += f"ID: {user['id']}, –ò–º—è: {user['first_name']} {user['last_name']}\n"
            await update.message.reply_markdown(message)
    except Exception:
        await update.message.reply_markdown("*üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏.*")

@role_required("admin")
async def load_events_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /load_events_csv."""
    await update.message.reply_markdown("*üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv).*")
    return EVENT_CSV_UPLOAD

@role_required("admin")
async def process_events_csv_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏."""
    try:
        file = await context.bot.get_file(update.message.document.file_id)
        data_folder = os.path.join(".", "data")
        if not os.path.exists(data_folder):
            os.makedirs(data_folder)
        temp_path = os.path.join(data_folder, update.message.document.file_name)
        await file.download_to_drive(custom_path=temp_path)
        count = 0
        await update.message.reply_markdown("*üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSV —Ñ–∞–π–ª —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏...*")
        with open(temp_path, newline="", encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                name = row.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "")
                event_date = row.get("–î–∞—Ç–∞", "")
                start_time = row.get("–í—Ä–µ–º—è", "")
                city = row.get("–õ–æ–∫–∞—Ü–∏—è", "")
                creator = row.get("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "")
                description = row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "")
                participation_points = 5
                tags = row.get("–¢–µ–≥–∏", "")
                code = row.get("–ö–æ–¥", "")
                owner = "admin"

                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                try:
                    event_db.add_event(
                        name=name,
                        event_date=event_date, 
                        start_time=start_time, 
                        city=city,
                        creator=creator,
                        description=description,
                        participation_points=int(participation_points),
                        tags=tags,
                        code=code,
                        owner=owner
                    )
                    count += 1
                    await update.message.reply_markdown(f"*‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.*")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
                    
        os.remove(temp_path)
        await update.message.reply_markdown(f"*‚úÖ CSV —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.* –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: _{count}_.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏: {e}")
        await update.message.reply_markdown("*üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏.*")
    return MAIN_MENU

@role_required("admin", "moderator")
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_menu_keyboard())
    return ADMIN_MENU

async def handle_admin_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        return ADMIN_SET_ADMIN
    elif text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ä–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:")
        return ADMIN_SET_MODERATOR
    elif text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        return ADMIN_DELETE_USER
    elif text == "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        return ADMIN_FIND_USER_ID
    elif text == "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        return ADMIN_FIND_USER_NAME
    elif text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ CSV":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:")
        return EVENT_CSV_UPLOAD
    elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        from bot.keyboards import get_main_menu_keyboard
        user_record = user_db.get_user(update.effective_user.id)
        role = user_record.get("role") if user_record else "user"
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard(role=role)
        )
        return MAIN_MENU
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return ADMIN_MENU

async def handle_admin_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.text
    user = user_db.get_user(user_id)
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ADMIN_MENU
    if user.get("role") == "admin":
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return ADMIN_MENU
    user_db.update_user_role(user_id, "admin")
    await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    return ADMIN_MENU

async def handle_moderator_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.text
    user = user_db.get_user(user_id)
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ADMIN_MENU
    if user.get("role") == "admin":
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –£–¥–∞–ª–∏—Ç–µ –µ–≥–æ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        return ADMIN_MENU
    if user.get("role") == "moderator":
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        return ADMIN_MENU
    user_db.update_user_role(user_id, "moderator")
    await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
    return ADMIN_MENU

async def handle_delete_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.text
    user = user_db.get_user(user_id)
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ADMIN_MENU
    user_db.delete_user(user_id)
    await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    return ADMIN_MENU

async def handle_find_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.text
    user = user_db.get_user(user_id)
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ADMIN_MENU
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user}")
    return ADMIN_MENU

async def handle_find_user_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.text
    users = user_db.find_users_by_name(user_name)
    if users:
        await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")
    else:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    return ADMIN_MENU

async def handle_events_csv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏."""
    if not update.message.document:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏.")
        return EVENT_CSV_UPLOAD

    if not update.message.document.file_name.endswith('.csv'):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .csv")
        return EVENT_CSV_UPLOAD

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV
        return await process_events_csv_document(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ADMIN_MENU

@role_required("admin", "moderator")
async def moderation_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_mod_menu_keyboard())
    return MOD_MENU

async def handle_moderation_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
        await update.message.reply_text("‚ú® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_cancel_keyboard())
        return MOD_EVENT_NAME

    elif text == "–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        return await moderator_view_events(update, context)

    elif text == "–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
        return await moderator_delete_event(update, context)

    elif text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        return MOD_EVENT_USERS

    elif text == "–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        return await moderator_list_all_events(update, context)

    elif text == "–í—ã–≥—Ä—É–∑–∏—Ç—å CSV":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=get_csv_export_menu_keyboard())
        return CSV_EXPORT_MENU

    elif text == "–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:",
            reply_markup=get_cancel_keyboard()
        )
        return EVENT_REPORT_CREATE

    elif text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞:",
            reply_markup=get_cancel_keyboard()
        )
        context.user_data["action"] = "view_report"
        return EVENT_REPORT_CREATE

    elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        from bot.keyboards import get_main_menu_keyboard
        user_record = user_db.get_user(update.effective_user.id)
        role = user_record.get("role") if user_record else "user"
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard(role=role)
        )
        return MAIN_MENU

    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                                        reply_markup=get_mod_menu_keyboard())
        return MOD_MENU

@role_required("admin", "moderator")
async def moderator_create_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ú® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_cancel_keyboard())
    return MOD_EVENT_NAME

async def handle_event_creation_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_mod_menu_keyboard()
    )
    return MOD_MENU

async def moderator_handle_event_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await handle_event_creation_cancel(update, context)
    context.user_data["event_name"] = text
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=get_cancel_keyboard())
    return MOD_EVENT_DATE

async def moderator_handle_event_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await handle_event_creation_cancel(update, context)

    try:
        datetime.strptime(text, "%d.%m.%Y")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.", 
                                      reply_markup=get_cancel_keyboard())
        return MOD_EVENT_DATE
    
    context.user_data["event_date"] = text
    await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ß–ß:–ú–ú):", reply_markup=get_cancel_keyboard())
    return MOD_EVENT_TIME

async def moderator_handle_event_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await handle_event_creation_cancel(update, context)

    try:
        datetime.strptime(text, "%H:%M")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.", 
                                      reply_markup=get_cancel_keyboard())
        return MOD_EVENT_TIME

    context.user_data["event_time"] = text
    await update.message.reply_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_city_selection_keyboard_with_cancel()
    )
    return MOD_EVENT_CITY

async def moderator_handle_event_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await handle_event_creation_cancel(update, context)

    if text not in CITIES:
        await update.message.reply_text(
            "‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ:",
            reply_markup=get_city_selection_keyboard_with_cancel()
        )
        return MOD_EVENT_CITY

    context.user_data["event_city"] = text
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_cancel_keyboard())
    return MOD_EVENT_CREATOR

async def moderator_handle_event_creator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await handle_event_creation_cancel(update, context)

    context.user_data["event_creator"] = text
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_cancel_keyboard())
    return MOD_EVENT_DESCRIPTION

async def moderator_handle_event_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await handle_event_creation_cancel(update, context)

    context.user_data["event_description"] = text
    context.user_data["event_participation_points"] = 5

    await update.message.reply_text(
        "üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_tag_selection_keyboard_with_cancel()
    )
    context.user_data["selected_tags"] = []
    return MOD_EVENT_TAGS

async def moderator_handle_event_participation_points(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["event_participation_points"] = 5
    await update.message.reply_text(
        "üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_tag_selection_keyboard_with_cancel()
    )
    context.user_data["selected_tags"] = []
    return MOD_EVENT_TAGS

async def moderator_handle_event_tags(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await handle_event_creation_cancel(update, context)
        
    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not context.user_data.get("selected_tags"):
            await update.message.reply_text(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
                reply_markup=get_tag_selection_keyboard_with_cancel(selected_tags=context.user_data.get("selected_tags", []))
            )
            return MOD_EVENT_TAGS
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        context.user_data["event_tags"] = ",".join(context.user_data.get("selected_tags", []))
        await update.message.reply_text(
            "üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–æ–¥–∏–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):",
            reply_markup=get_cancel_keyboard()
        )
        return MOD_EVENT_CODE
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞
    selected_tag = text.split(" ‚úîÔ∏è")[0]  # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä –≤—ã–±–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if selected_tag in TAGS:
        selected_tags = context.user_data.get("selected_tags", [])
        if selected_tag in selected_tags:
            selected_tags.remove(selected_tag)
        else:
            selected_tags.append(selected_tag)
        context.user_data["selected_tags"] = selected_tags
        
        await update.message.reply_text(
            "üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=get_tag_selection_keyboard_with_cancel(selected_tags=selected_tags)
        )
        return MOD_EVENT_TAGS
        
    await update.message.reply_text(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
        reply_markup=get_tag_selection_keyboard_with_cancel(selected_tags=context.user_data.get("selected_tags", []))
    )
    return MOD_EVENT_TAGS

async def moderator_handle_event_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await handle_event_creation_cancel(update, context)
        
    context.user_data["event_code"] = text
    summary = (
        f"üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:*\n\n"
        f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* {context.user_data['event_name']}\n"
        f"üìÖ *–î–∞—Ç–∞:* {context.user_data['event_date']}\n"
        f"‚è∞ *–í—Ä–µ–º—è:* {context.user_data['event_time']}\n"
        f"üìç *–õ–æ–∫–∞—Ü–∏—è:* {context.user_data['event_city']}\n"
        f"üë§ *–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:* {context.user_data['event_creator']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data['event_description']}\n"
        f"üí∞ *–¶–µ–Ω–Ω–æ—Å—Ç—å:* {context.user_data['event_participation_points']}\n"
        f"üè∑Ô∏è *–¢–µ–≥–∏:* {context.user_data['event_tags']}\n"
        f"üîë *–ö–æ–¥:* {context.user_data['event_code']}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è?"
    )
    await update.message.reply_markdown(summary, reply_markup=get_confirm_keyboard())
    return MOD_EVENT_CONFIRM

async def moderator_confirm_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    
    if text == "‚ùå –ù–µ—Ç":
        return await handle_event_creation_cancel(update, context)
        
    if text != "‚úÖ –î–∞":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '‚úÖ –î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '‚ùå –ù–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_confirm_keyboard()
        )
        return MOD_EVENT_CONFIRM
        
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É owner –≤ —Ñ–æ—Ä–º–∞—Ç–µ "moderator:user_id"
        owner = f"moderator:{update.effective_user.id}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        event_db.add_event(
            name=context.user_data["event_name"],
            event_date=context.user_data["event_date"],
            start_time=context.user_data["event_time"],
            city=context.user_data["event_city"],
            creator=context.user_data["event_creator"],
            description=context.user_data["event_description"],
            participation_points=context.user_data["event_participation_points"],
            tags=context.user_data["event_tags"],
            code=context.user_data["event_code"],
            owner=owner
        )
        
        await update.message.reply_text(
            "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!", 
            reply_markup=get_mod_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}", 
            reply_markup=get_mod_menu_keyboard()
        )
    
    return MOD_MENU

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@role_required("admin", "moderator")
async def moderator_view_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."""
    user = update.effective_user
    user_record = user_db.get_user(user.id)

    # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ - —Ç–æ–ª—å–∫–æ –µ–≥–æ
    if user_record.get("role") == "admin":
        events = event_db.get_all_events()
    else:
        owner_str = f"moderator:{user.id}"
        events = [event for event in event_db.get_all_events() if event.get("owner") == owner_str]

    if not events:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", reply_markup=get_mod_menu_keyboard())
        return MOD_MENU

    message = "–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for event in events:
        users = event_db.get_users_for_event(event['id'])
        message += f"üìå {event['name']}\n"
        message += f"üìÖ {event['event_date']}\n"
        message += f"‚è∞ {event['start_time']}\n"
        message += f"üìç {event['city']}\n"
        message += f"üîë –ö–æ–¥: {event.get('code')}\n"
        if users:
            message += "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            for u in users:
                message += f"- {u['first_name']} (ID: {u['id']})\n"
        else:
            message += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        message += "\n"

    await update.message.reply_text(message, reply_markup=get_mod_menu_keyboard())
    return MOD_MENU

async def moderator_handle_view_event_users_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    await query.answer()
    event_id = query.data.split(":", 1)[1]
    users = event_db.get_users_for_event(event_id)
    if not users:
        await query.edit_message_text("–ù–∞ –¥–∞–Ω–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        message = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        for u in users:
            message += f"ID: {u['id']}, –ò–º—è: {u['first_name']}\n"
        await query.edit_message_text(message)
    return MOD_MENU

@role_required("admin", "moderator")
async def moderator_delete_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    user = update.effective_user
    user_record = user_db.get_user(user.id)

    # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ - —Ç–æ–ª—å–∫–æ –µ–≥–æ
    if user_record.get("role") == "admin":
        events = event_db.get_all_events()
    else:
        owner_str = f"moderator:{user.id}"
        events = [event for event in event_db.get_all_events() if event.get("owner") == owner_str]

    if not events:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_mod_menu_keyboard())
        return MOD_MENU

    message = "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for event in events:
        message += f"ID: {event['id']} - {event['name']} ({event.get('event_date')})\n"
    
    message += "\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID:"
    await update.message.reply_text(message)
    return MOD_EVENT_DELETE

@role_required("admin", "moderator")
async def moderator_handle_delete_event_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ callback_data
    event_id = int(query.data.split(":", 1)[1])
    
    user = update.effective_user

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    event = event_db.get_event_by_id(event_id)
    if not event:
        await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return MOD_MENU

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    if event.get("owner") != f"moderator:{user.id}":
        await query.edit_message_text("üö´ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        return MOD_MENU

    try:
        # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event_db.delete_event(event_id)
        await query.edit_message_text(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event.get('name')}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    
    return MOD_MENU

async def moderator_handle_search_event_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    event_id_text = update.message.text.strip()
    try:
        event_id = int(event_id_text)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return MOD_EVENT_USERS

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –ø–æ –µ–≥–æ ID
    event = event_db.get_event_by_id(event_id)
    if not event:
        await update.message.reply_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return MOD_MENU

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ –ø–æ–ª—è tags
    name = event.get("name")
    code = event.get("code")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∫–æ–¥–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    message = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {name}"
    message += f" (–ö–æ–¥: {code})"
    message += "\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    users = event_db.get_users_for_event(event_id)
    if not users:
        message += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        for u in users:
            message += f"ID: {u['id']}, –ò–º—è: {u['first_name']}\n"
    await update.message.reply_text(message)
    return MOD_MENU

async def moderator_search_event_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    return MOD_EVENT_USERS

async def moderator_list_all_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    events = event_db.get_all_events()
    if not events:
        await update.message.reply_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return MOD_MENU

    message_lines = ["üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n"]
    for event in events:
        id = event.get("id")
        name = event.get("name")
        date = event.get("date", "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        start_time = event.get("start_time", "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        city = event.get("city", "–†–µ–≥–∏–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω")

        message_lines.append(f"üìå {name}")
        message_lines.append(f"üìÖ –î–∞—Ç–∞: {date}")
        message_lines.append(f"‚è∞ –í—Ä–µ–º—è: {start_time}")
        message_lines.append(f"üìç –†–µ–≥–∏–æ–Ω: {city}\n")

    message_text = "\n".join(message_lines)
    await update.message.reply_text(message_text)
    return MOD_MENU

async def handle_event_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    try:
        event_id = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=get_mod_menu_keyboard())
        return MOD_MENU

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    user_record = user_db.get_user(user.id)
    if not user_record or user_record.get("role") not in ["admin", "moderator"]:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", reply_markup=get_mod_menu_keyboard())
        return MOD_MENU

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    event = event_db.get_event_by_id(event_id)
    if not event:
        await update.message.reply_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_mod_menu_keyboard())
        return MOD_MENU

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    if user_record.get("role") == "moderator" and event.get("owner") != f"moderator:{user.id}":
        await update.message.reply_text("üö´ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", reply_markup=get_mod_menu_keyboard())
        return MOD_MENU

    try:
        # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event_db.delete_event(event_id)
        await update.message.reply_text(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event.get('name')}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_mod_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", reply_markup=get_mod_menu_keyboard())
    
    return MOD_MENU


async def moderator_export_events_csv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        events = event_db.get_all_events()
        if not events:
            await update.message.reply_text("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=get_mod_menu_keyboard())
            return MOD_MENU

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ data
        os.makedirs("data", exist_ok=True)
        temp_file = os.path.join("data", "events_export.csv")

        fieldnames = ["id", "name", "event_date", "start_time", "city", "creator", "description",
                      "participation_points", "participants_count", "tags", "code", "owner"]

        with open(temp_file, "w", newline="", encoding="utf-8") as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            for event in events:
                writer.writerow({
                    "id": event.get("id", ""),
                    "name": event.get("name", ""),
                    "event_date": event.get("event_date", ""),
                    "start_time": event.get("start_time", ""),
                    "city": event.get("city", ""),
                    "creator": event.get("creator", ""),
                    "description": event.get("description", ""),
                    "participation_points": event.get("participation_points", 0),
                    "participants_count": event.get("participants_count", 0),
                    "tags": event.get("tags", ""),
                    "code": event.get("code", ""),
                    "owner": event.get("owner", "")
                })

        with open(temp_file, "rb") as f:
            await update.message.reply_document(
                document=f,
                filename="events_export.csv",
                caption="–í—ã–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ"
            )

        os.remove(temp_file)
        return MOD_MENU

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.",
                                        reply_markup=get_mod_menu_keyboard())
        return MOD_MENU


@role_required("admin", "moderator")
async def moderator_export_users_csv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å –º–µ—Ç–æ–¥ get_all_users()
        users = user_db.get_all_users()
        if not users:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                                            reply_markup=get_mod_menu_keyboard())
            return MOD_MENU

        os.makedirs("data", exist_ok=True)
        temp_file = os.path.join("data", "users_export.csv")

        fieldnames = ["id", "first_name", "telegram_tag", "employee_number", "role", "score", "registered_events",
                      "tags", "city"]
        with open(temp_file, "w", newline="", encoding="utf-8") as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            for user in users:
                writer.writerow({
                    "id": user.get("id", ""),
                    "first_name": user.get("first_name", ""),
                    "telegram_tag": user.get("telegram_tag", ""),
                    "employee_number": user.get("employee_number", ""),
                    "role": user.get("role", ""),
                    "score": user.get("score", 0),
                    "registered_events": user.get("registered_events", ""),
                    "tags": user.get("tags", ""),
                    "city": user.get("city", "")
                })

        with open(temp_file, "rb") as f:
            await update.message.reply_document(
                document=f,
                filename="users_export.csv",
                caption="–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ"
            )

        os.remove(temp_file)
        return MOD_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                                        reply_markup=get_mod_menu_keyboard())
        return MOD_MENU


@role_required("admin", "moderator")
async def create_event_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏."""
    event_id = context.user_data.get("selected_event_id")
    if not event_id:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return MOD_MENU

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç
    from database.models.event_report import EventReportModel
    report_model = EventReportModel()
    existing_report = report_model.get_report(event_id)
    
    if existing_report:
        await update.message.reply_text(
            "‚ùå –û—Ç—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=ReplyKeyboardRemove()
        )
        return MOD_MENU

    await update.message.reply_text(
        "üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
        reply_markup=get_cancel_keyboard()
    )
    return EVENT_REPORT_PARTICIPANTS

async def handle_report_participants(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    try:
        participants = int(update.message.text)
        if participants < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        context.user_data["report_participants"] = participants
        
        await update.message.reply_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
            reply_markup=get_cancel_keyboard()
        )
        return EVENT_REPORT_PHOTOS
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            reply_markup=get_cancel_keyboard()
        )
        return EVENT_REPORT_PARTICIPANTS

async def handle_report_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."""
    photos = update.message.text
    context.user_data["report_photos"] = photos
    
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_cancel_keyboard()
    )
    return EVENT_REPORT_SUMMARY

async def handle_report_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    summary = update.message.text
    context.user_data["report_summary"] = summary
    
    await update.message.reply_text(
        "üí≠ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å):\n"
        "–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ —à–∞–≥–∞, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"], ["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return EVENT_REPORT_FEEDBACK

async def handle_report_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç."""
    feedback = None if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else update.message.text
    
    try:
        from database.models.event_report import EventReportModel
        report_model = EventReportModel()
        
        event_id = context.user_data.get("selected_event_id")
        participants = context.user_data.get("report_participants")
        photos = context.user_data.get("report_photos")
        summary = context.user_data.get("report_summary")
        
        report_model.create_report(
            event_id=event_id,
            actual_participants=participants,
            photos_links=photos,
            summary=summary,
            feedback=feedback
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
        for key in ["report_participants", "report_photos", "report_summary"]:
            if key in context.user_data:
                del context.user_data[key]
        
        await update.message.reply_text(
            "‚úÖ –û—Ç—á–µ—Ç –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            reply_markup=get_mod_menu_keyboard()
        )
        return MOD_MENU
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_mod_menu_keyboard()
        )
        return MOD_MENU

@role_required("admin", "moderator")
async def view_event_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏."""
    event_id = context.user_data.get("selected_event_id")
    if not event_id:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return MOD_MENU

    try:
        from database.models.event_report import EventReportModel
        report_model = EventReportModel()
        report = report_model.get_report(event_id)
        
        if not report:
            await update.message.reply_text(
                "‚ùå –û—Ç—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω.",
                reply_markup=get_mod_menu_keyboard()
            )
            return MOD_MENU
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        event = event_db.get_event_by_id(event_id)
        
        report_text = (
            f"üìä *–û—Ç—á–µ—Ç –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ \"{event['name']}\"*\n\n"
            f"üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {report['report_date']}\n"
            f"üë• –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {report['actual_participants']}\n\n"
            f"üìù –ò—Ç–æ–≥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n{report['summary']}\n\n"
        )
        
        if report['photos_links']:
            report_text += f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {report['photos_links']}\n\n"
            
        if report['feedback']:
            report_text += f"üí≠ –û—Ç–∑—ã–≤—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{report['feedback']}\n"
            
        await update.message.reply_markdown_v2(
            report_text,
            reply_markup=get_mod_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ç—á–µ—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ç—á–µ—Ç–∞.",
            reply_markup=get_mod_menu_keyboard()
        )
    
    return MOD_MENU

@role_required("admin", "moderator")
async def handle_csv_export_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text == "–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        return await moderator_export_users_csv(update, context)
    elif text == "–í—ã–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π":
        return await moderator_export_events_csv(update, context)
    elif text == "–í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–æ–≤":
        return await moderator_export_reports_csv(update, context)
    elif text == "–ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_mod_menu_keyboard())
        return MOD_MENU
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.")
        return CSV_EXPORT_MENU

async def handle_event_report_create(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞."""
    try:
        event_id = int(update.message.text)
        event = event_db.get_event_by_id(event_id)
        
        if not event:
            await update.message.reply_text(
                "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_mod_menu_keyboard()
            )
            return MOD_MENU
            
        context.user_data["selected_event_id"] = event_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç
        if context.user_data.get("action") == "view_report":
            return await view_event_report(update, context)
        else:
            return await create_event_report(update, context)
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—á–∏—Å–ª–æ).",
            reply_markup=get_cancel_keyboard()
        )
        return EVENT_REPORT_CREATE
