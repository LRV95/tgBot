from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from bot.constants import CITIES, TAGS

def get_main_menu_keyboard(role="user"):
    if role == "admin":
        return ReplyKeyboardMarkup([
            ["üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞", "ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞"],
            ["–ú–æ–¥–µ—Ä–∞—Ü–∏—è"],
            ["/load_excel", "/set_admin", "/set_moderator"],
            ["/delete_user", "/find_user_id"],
            ["/find_users_name", "/find_users_email", "/load_projects_csv", "/load_events_csv"]
        ], resize_keyboard=True)
    elif role == "moderator":
        return ReplyKeyboardMarkup([
            ["üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞", "ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞"],
            ["–ú–æ–¥–µ—Ä–∞—Ü–∏—è"],
            ["/delete_user", "/find_user_id"],
            ["/load_projects_csv", "/load_events_csv"]
        ], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([
            ["üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞", "ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞", "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"]
        ], resize_keyboard=True)

def get_volunteer_home_keyboard():
    return ReplyKeyboardMarkup([
        ["–ü—Ä–æ—Ñ–∏–ª—å", "–¢–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
        ["–ë–æ–Ω—É—Å—ã", "–í–≤–µ—Å—Ç–∏ –∫–æ–¥", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
        ["–í—ã—Ö–æ–¥"]
    ], resize_keyboard=True)

def get_profile_menu_keyboard():
    return ReplyKeyboardMarkup([["–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "–í—ã—Ö–æ–¥"]],
                               resize_keyboard=True)

def get_tag_selection_keyboard(selected_tags=None):
    if selected_tags is None:
        selected_tags = []
    buttons = []
    for tag in TAGS:
        text = f"{tag} {'‚úì' if tag in selected_tags else ''}"
        buttons.append(InlineKeyboardButton(text, callback_data=f"tag:{tag}"))
    keyboard = []
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        keyboard.append(buttons[i:i + 2])
    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done_tags")])
    return InlineKeyboardMarkup(keyboard)

def get_city_selection_keyboard(selected_cities=None, page=0, page_size=3):
    if selected_cities is None:
        selected_cities = []
    buttons = []
    start_idx = page * page_size
    end_idx = start_idx + page_size
    cities_slice = CITIES[start_idx:end_idx]
    
    for city in cities_slice:
        text = f"{city} {'‚úîÔ∏è' if city in selected_cities else ''}"
        buttons.append(InlineKeyboardButton(text, callback_data=f"city:{city}"))
    
    keyboard = []
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    for button in buttons:
        keyboard.append([button])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"city_prev:{page}"))
    if end_idx < len(CITIES):
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"city_next:{page}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done_cities")])
    
    return InlineKeyboardMarkup(keyboard)

def get_events_keyboard(events, page=0, page_size=2, total_count=0, registered_events=None):
    if registered_events is None:
        registered_events = []
    buttons = []
    for event in events:
        name = ""
        if event.get("tags"):
            parts = event["tags"].split(";")
            for part in parts:
                if "–ù–∞–∑–≤–∞–Ω–∏–µ:" in part:
                    name = part.split("–ù–∞–∑–≤–∞–Ω–∏–µ:")[1].strip()
                    break
        if not name:
            name = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ #{event['id']}"
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–µ - –≤—Å–µ–≥–¥–∞ –≤–µ–¥–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª–µ–π
        text = f"‚ú® {name}"
        if str(event['id']) in registered_events:
            text += " ‚úÖ"
        buttons.append([InlineKeyboardButton(text, callback_data=f"view_event:{event['id']}")])
        
        # –í—Ä–µ–º—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–µ - –≤—Å–µ–≥–¥–∞ –≤–µ–¥–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª–µ–π
        time_text = f"üïí {event['event_date']} {event['start_time']}"
        buttons.append([InlineKeyboardButton(time_text, callback_data=f"view_event:{event['id']}")])
        
        # –ú–µ—Å—Ç–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–µ - –≤—Å–µ–≥–¥–∞ –≤–µ–¥–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª–µ–π
        location_text = f"üìç {event['city']}"
        buttons.append([InlineKeyboardButton(location_text, callback_data=f"view_event:{event['id']}")])
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if str(event['id']) in registered_events:
            buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data=f"unregister_event:{event['id']}")])
        else:
            buttons.append([InlineKeyboardButton("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"register_event:{event['id']}")])
    
    keyboard = buttons
    total_pages = (total_count + page_size - 1) // page_size
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("<<", callback_data=f"events_prev:{page}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(">>", callback_data=f"events_next:{page}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
    keyboard.append([InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="show_filters")])
    
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_events_filter_keyboard(selected_tag=None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —Ç–µ–≥–∞–º."""
    from bot.constants import TAGS
    
    keyboard = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
    for tag in TAGS:
        text = f"{tag} {'‚úì' if tag == selected_tag else ''}"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"filter_tag:{tag}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
    keyboard.append([InlineKeyboardButton("–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="filter_tag:all")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_events")])
    
    return InlineKeyboardMarkup(keyboard)

def get_profile_update_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ò–º—è", callback_data="update:name"), InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="update:tags")],
        [InlineKeyboardButton("–ì–æ—Ä–æ–¥", callback_data="update:city")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="update:cancel")]
    ])

def get_event_details_keyboard(event_id, is_registered=False):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if is_registered:
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data=f"unregister_event:{event_id}")])
    else:
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"register_event:{event_id}")])
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
    keyboard.append([InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_event:{event_id}")])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_events")])
    
    return InlineKeyboardMarkup(keyboard)

def get_ai_chat_keyboard():
    return ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

def get_moderation_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
        ["–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
        ["–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

