"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞."""

from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup

def get_main_menu_keyboard(role="user"):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if role == "admin":
        return ReplyKeyboardMarkup([["üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞", "ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞"],
                                  ["/load_excel", "/set_admin", "/set_moderator"],
                                  ["/delete_user", "/find_user_id"],
                                  ["/find_users_name", "/find_users_email", "/load_csv", "/load_events_csv"]],
                                 resize_keyboard=True)
    elif role == "moderator":
        return ReplyKeyboardMarkup([["üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞", "ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞"],
                                  ["/delete_user", "/find_user_id"],
                                  ["/load_csv", "/load_events_csv"]],
                                 resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([["üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞", "ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞", "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"]],
                                 resize_keyboard=True)

def get_volunteer_home_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–º–∞—à–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞."""
    return ReplyKeyboardMarkup([["–ü—Ä–æ—Ñ–∏–ª—å", "–¢–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
                              ["–ë–æ–Ω—É—Å—ã", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã—Ö–æ–¥."]],
                             resize_keyboard=True)

def get_profile_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è."""
    return ReplyKeyboardMarkup([["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "–í—ã—Ö–æ–¥"]],
                             resize_keyboard=True)


from telegram import InlineKeyboardButton, InlineKeyboardMarkup


def get_tag_selection_keyboard(selected_tags=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤."""
    if selected_tags is None:
        selected_tags = []

    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤
    tags = ["—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ", "–º–µ–¥–∏—Ü–∏–Ω–∞", "—ç–∫–æ–ª–æ–≥–∏—è", "–∫—É–ª—å—Ç—É—Ä–∞", "—Å–ø–æ—Ä—Ç"]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
    buttons = []
    for tag in tags:
        text = f"{tag} {'‚úì' if tag in selected_tags else ''}"
        buttons.append(InlineKeyboardButton(text, callback_data=f"tag:{tag}"))

    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
    keyboard = []
    keyboard.append(buttons[:2])
    keyboard.append(buttons[2:4])
    keyboard.append([buttons[4]])
    # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done")])

    return InlineKeyboardMarkup(keyboard)


def get_city_selection_keyboard(selected_cities=None, page=0, page_size=2):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤."""
    if selected_cities is None:
        selected_cities = []

    CITIES = ["–°–ü–ë", "–ú–æ—Å–∫–≤–∞", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–ö–∞–∑–∞–Ω—å"]

    total_pages = (len(CITIES) + page_size - 1) // page_size
    start = page * page_size
    end = start + page_size
    cities_on_page = CITIES[start:end]

    buttons = []
    for city in cities_on_page:
        text = f"{city} {'‚úì' if city in selected_cities else ''}"
        buttons.append(InlineKeyboardButton(text, callback_data=f"city:{city}"))

    navigation = []
    if page > 0:
        navigation.append(InlineKeyboardButton("<<", callback_data=f"city_prev:{page}"))
    if page < total_pages - 1:
        navigation.append(InlineKeyboardButton(">>", callback_data=f"city_next:{page}"))

    keyboard = []
    if buttons:
        keyboard.append(buttons)
    if navigation:
        keyboard.append(navigation)
    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done_cities")])

    return InlineKeyboardMarkup(keyboard)

def get_events_keyboard(events, page=0, page_size=5, total_count=0):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.
    –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.
    """
    buttons = []
    for event in events:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ tags, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        name = ""
        if event.get("tags"):
            parts = event["tags"].split(";")
            for part in parts:
                if "–ù–∞–∑–≤–∞–Ω–∏–µ:" in part:
                    name = part.split("–ù–∞–∑–≤–∞–Ω–∏–µ:")[1].strip()
                    break
        if not name:
            name = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ #{event['id']}"
        text = f"{name} ({event['event_date']} {event['start_time']})"
        buttons.append(InlineKeyboardButton(text, callback_data=f"register_event:{event['id']}"))

    keyboard = [[btn] for btn in buttons]

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    total_pages = (total_count + page_size - 1) // page_size
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("<<", callback_data=f"events_prev:{page}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(">>", callback_data=f"events_next:{page}"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")])

    return InlineKeyboardMarkup(keyboard)
