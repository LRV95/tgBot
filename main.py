"""–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞."""

import logging
import signal
import sys
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    CallbackQueryHandler
)

from config import TOKEN
from bot.states import (
    MAIN_MENU,
    WAIT_FOR_CSV,
    AI_CHAT,
    VOLUNTEER_HOME,
    GUEST_HOME,
    GUEST_REGISTRATION,
    GUEST_TAG_SELECTION,
    PROFILE_MENU,
    WAIT_FOR_PROFILE_UPDATE,
    PROFILE_TAG_SELECTION,
    PROFILE_UPDATE_SELECTION,
    WAIT_FOR_EVENTS_CSV
)
from bot.handlers.common import start, cancel
from bot.handlers.admin import (
    admin_command,
    load_excel,
    set_admin,
    set_moderator,
    delete_user,
    find_user_id,
    find_users_name,
    find_users_email,
    load_csv,
    process_csv_document,
    load_events_csv,
    process_events_csv_document
)
from bot.handlers.user import (
    handle_main_menu,
    handle_ai_chat,
    handle_volunteer_home,
    handle_guest_registration,
    handle_tag_selection,
    handle_profile_menu,
    handle_profile_update_selection,
    handle_contact_update,
    handle_profile_tag_selection
)

class VolunteerBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞."""
    
    def __init__(self, token=TOKEN):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        self.token = token
        self.logger = logging.getLogger(__name__)
        logging.basicConfig(
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            level=logging.INFO,
            handlers=[
                logging.FileHandler("bot.log"),
                logging.StreamHandler(sys.stdout)
            ]
        )
        try:
            self.application = Application.builder().token(self.token).build()
            self.setup_handlers()
        except Exception as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            sys.exit(1)

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                MAIN_MENU: [
                    MessageHandler(
                        filters.Regex("^(üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞|ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫|ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞|–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è|–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è|–í—ã—Ö–æ–¥)$"),
                        handle_main_menu
                    )
                ],
                AI_CHAT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ai_chat)
                ],
                VOLUNTEER_HOME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_volunteer_home)
                ],
                GUEST_HOME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)
                ],
                GUEST_REGISTRATION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guest_registration)
                ],
                GUEST_TAG_SELECTION: [
                    CallbackQueryHandler(handle_tag_selection, pattern="^(tag:|done)$")
                ],
                WAIT_FOR_PROFILE_UPDATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact_update)
                ],
                PROFILE_UPDATE_SELECTION: [
                    CallbackQueryHandler(handle_profile_update_selection, pattern="^(update:)")
                ],
                PROFILE_TAG_SELECTION: [
                    CallbackQueryHandler(handle_profile_tag_selection, pattern="^(tag:|done_tags).*")
                ],
                PROFILE_MENU: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_profile_menu)
                ]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
        )
        self.application.add_handler(conv_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        csv_conv_handler = ConversationHandler(
            entry_points=[CommandHandler("load_csv", load_csv)],
            states={
                WAIT_FOR_CSV: [
                    MessageHandler(filters.Document.FileExtension("csv"), process_csv_document)
                ]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
        )
        self.application.add_handler(csv_conv_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
        events_csv_conv_handler = ConversationHandler(
            entry_points=[CommandHandler("load_events_csv", load_events_csv)],
            states={
                WAIT_FOR_EVENTS_CSV: [
                    MessageHandler(filters.Document.FileExtension("csv"), process_events_csv_document)
                ]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
        )
        self.application.add_handler(events_csv_conv_handler)

        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("admin", admin_command))
        self.application.add_handler(CommandHandler("load_excel", load_excel))
        self.application.add_handler(CommandHandler("set_admin", set_admin))
        self.application.add_handler(CommandHandler("set_moderator", set_moderator))
        self.application.add_handler(CommandHandler("delete_user", delete_user))
        self.application.add_handler(CommandHandler("find_user_id", find_user_id))
        self.application.add_handler(CommandHandler("find_users_name", find_users_name))
        self.application.add_handler(CommandHandler("find_users_email", find_users_email))

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            for sig in (signal.SIGTERM, signal.SIGINT):
                self.application.add_handler(
                    CommandHandler(str(sig), lambda u, c: self.shutdown(sig))
                )
            
            self.logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            self.application.run_polling(allowed_updates=Update.ALL_TYPES)
        except Exception as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            self.shutdown()

if __name__ == "__main__":
    try:
        bot = VolunteerBot()
        bot.run()
    except Exception as e:
        logging.critical(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
