import logging
import os
import csv
import openpyxl
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, filters, CallbackQueryHandler, ContextTypes
from config import TOKEN, ADMIN_ID
from source.database import Database
from source.agents import RecommendationAgent

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
MAIN_MENU = 0
WAIT_FOR_CSV = 1
AI_CHAT = 2
VOLUNTEER_HOME = 3
GUEST_HOME = 4
GUEST_REGISTRATION = 5
PROFILE_MENU = 6
WAIT_FOR_PROFILE_UPDATE = 7         # –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
GUEST_TAG_SELECTION = 8             # –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
PROFILE_TAG_SELECTION = 9           # –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
PROFILE_UPDATE_SELECTION = 10       # –≤—ã–±–æ—Ä, —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å: –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–ª–∏ —Ç–µ–≥–∏
WAIT_FOR_EVENTS_CSV = 11            # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏

def get_main_menu_keyboard(role="user"):
    if role == "admin":
        return ReplyKeyboardMarkup([["üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞", "ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞"],
                                    ["/load_excel", "/set_admin", "/set_moderator"],
                                    ["/delete_user", "/find_user_id"],
                                    ["/find_users_name", "/find_users_email", "/delete_me", "/load_csv", "/load_events_csv"]],
                                   resize_keyboard=True)
    elif role == "moderator":
        return ReplyKeyboardMarkup([["üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞", "ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞"],
                                    ["/delete_user", "/find_user_id"],
                                    ["/delete_me", "/load_csv", "/load_events_csv"]],
                                   resize_keyboard=True)
    elif role == "guest":
        return ReplyKeyboardMarkup([["ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫", "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"], ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–í—ã—Ö–æ–¥"]],
                                   resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([["üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞", "ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞"]],
                                   resize_keyboard=True)

def get_volunteer_home_keyboard():
    return ReplyKeyboardMarkup([["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ü—Ä–æ—Ñ–∏–ª—å", "–¢–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
                                ["–ë–æ–Ω—É—Å—ã", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã—Ö–æ–¥."]],
                               resize_keyboard=True)

def get_profile_menu_keyboard():
    return ReplyKeyboardMarkup([["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "–í—ã—Ö–æ–¥"]],
                               resize_keyboard=True)

class VolunteerBot:
    def __init__(self, token=TOKEN):
        self.token = token
        self.logger = logging.getLogger(__name__)
        logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
        self.db = Database()
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()

    def setup_handlers(self):
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.start)],
            states={
                MAIN_MENU: [MessageHandler(filters.Regex("^(üè† –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞|ü§ñ –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞|–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è|–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è|–í—ã—Ö–æ–¥)$"), self.handle_main_menu)],
                AI_CHAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_ai_chat)],
                VOLUNTEER_HOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_volunteer_home)],
                GUEST_HOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_guest_home)],
                GUEST_REGISTRATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_guest_registration)],
                GUEST_TAG_SELECTION: [CallbackQueryHandler(self.handle_tag_selection, pattern="^(tag:|done)$")],
                WAIT_FOR_PROFILE_UPDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_contact_update)],
                PROFILE_UPDATE_SELECTION: [CallbackQueryHandler(self.handle_profile_update_selection, pattern="^(update:)")],
                PROFILE_TAG_SELECTION: [CallbackQueryHandler(self.handle_profile_tag_selection, pattern="^(tag:|done_tags).*")],
                PROFILE_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_profile_menu)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        )
        self.application.add_handler(conv_handler)

        csv_conv_handler = ConversationHandler(
            entry_points=[CommandHandler("load_csv", self.load_csv)],
            states={WAIT_FOR_CSV: [MessageHandler(filters.Document.FileExtension("csv"), self.process_csv_document)]},
            fallbacks=[CommandHandler("cancel", self.cancel)]
        )
        self.application.add_handler(csv_conv_handler)

        # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
        events_csv_conv_handler = ConversationHandler(
            entry_points=[CommandHandler("load_events_csv", self.load_events_csv)],
            states={WAIT_FOR_EVENTS_CSV: [MessageHandler(filters.Document.FileExtension("csv"), self.process_events_csv_document)]},
            fallbacks=[CommandHandler("cancel", self.cancel)]
        )
        self.application.add_handler(events_csv_conv_handler)

        self.application.add_handler(CommandHandler("admin", self.admin))
        self.application.add_handler(CommandHandler("load_excel", self.load_excel))
        self.application.add_handler(CommandHandler("set_admin", self.set_admin))
        self.application.add_handler(CommandHandler("set_moderator", self.set_moderator))
        self.application.add_handler(CommandHandler("delete_me", self.delete_self))
        self.application.add_handler(CommandHandler("delete_user", self.admin_delete_user))
        self.application.add_handler(CommandHandler("find_user_id", self.find_user_id))
        self.application.add_handler(CommandHandler("find_users_name", self.find_users_name))
        self.application.add_handler(CommandHandler("find_users_email", self.find_users_email))
        self.application.add_handler(CommandHandler("search_projects_tag", self.search_projects_tag))
        self.application.add_handler(CommandHandler("search_projects_name", self.search_projects_name))
        self.application.add_handler(CommandHandler("search_events_tag", self.search_events_tag))
        self.application.add_handler(CommandHandler("search_events_project", self.search_events_project))
        self.application.add_handler(CommandHandler("ai_query", self.ai_query))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_record = self.db.get_user(user.id)
        if not user_record:
            role = "admin" if user.id in ADMIN_ID else "guest"
            self.db.save_user(user.id, user.first_name or "", user.last_name or "", "", "", 0, "", role)
            if role == "admin":
                await update.message.reply_markdown("*‚úÖ You are registered! You are an admin.* üéâ")
            else:
                await update.message.reply_markdown("*üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≥–æ—Å—Ç—å!*")
        else:
            if user_record.get("role") == "user" and user.id in ADMIN_ID:
                self.db.update_user_role(user.id, "admin")
            if user_record.get("role") == "admin":
                await update.message.reply_markdown("*üëã Welcome back, admin!*")
            else:
                await update.message.reply_markdown("*üëã Welcome back!*")
        role = self.db.get_user(user.id).get("role", "guest")
        keyboard = get_main_menu_keyboard(role)
        await update.message.reply_markdown("*üìå Choose a section:*", reply_markup=keyboard)
        return MAIN_MENU

    async def handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        role = self.db.get_user(user.id).get("role", "guest")
        choice = update.message.text.strip()
        if role == "guest":
            if choice == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
                await update.message.reply_markdown("*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è, –§–∞–º–∏–ª–∏—è, Email*")
                return GUEST_REGISTRATION
            elif choice == "ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫":
                exit_keyboard = ReplyKeyboardMarkup([["–í—ã—Ö–æ–¥."]], resize_keyboard=True)
                await update.message.reply_markdown("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò –ü–æ–º–æ—â–Ω–∏–∫–∞:", reply_markup=exit_keyboard)
                return AI_CHAT
            elif choice == "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
                events = self.db.get_all_events()
                if events:
                    message = "*–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:*\n"
                    for event in events:
                        message += f"ID: {event['id']}, –î–∞—Ç–∞: {event['event_date']}, –í—Ä–µ–º—è: {event['start_time']}, –°–æ–∑–¥–∞—Ç–µ–ª—å: {event['creator']}, –¢–µ–≥–∏: {event['tags']}\n"
                    await update.message.reply_markdown(message)
                else:
                    await update.message.reply_markdown("*–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç.*")
                await update.message.reply_markdown("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_menu_keyboard("guest"))
                return GUEST_HOME
            elif choice == "–í—ã—Ö–æ–¥":
                await update.message.reply_markdown("*–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!*")
                return ConversationHandler.END
            else:
                await update.message.reply_markdown("*‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.*")
                return GUEST_HOME
        else:
            if "–î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞" in choice:
                await update.message.reply_markdown("*üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞.*", reply_markup=get_volunteer_home_keyboard())
                return VOLUNTEER_HOME
            elif "–ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞" in choice:
                exit_keyboard = ReplyKeyboardMarkup([["–í—ã—Ö–æ–¥."]], resize_keyboard=True)
                await update.message.reply_markdown("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò –í–æ–ª–æ–Ω—Ç–µ—Ä–∞:", reply_markup=exit_keyboard)
                return AI_CHAT
            else:
                await update.message.reply_markdown("*‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.*")
                return MAIN_MENU

    async def handle_guest_home(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.handle_main_menu(update, context)

    async def handle_guest_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        parts = [part.strip() for part in text.split(",")]
        if len(parts) != 3:
            await update.message.reply_markdown("*‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: –ò–º—è, –§–∞–º–∏–ª–∏—è, Email*")
            return GUEST_REGISTRATION
        first_name, last_name, email = parts
        user = update.effective_user
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ç–µ–≥–æ–≤ (–ø–æ–∫–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
        self.db.save_user(user.id, first_name, last_name, email, "", 0, "", "user")
        await update.message.reply_markdown("*‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*")
        # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        context.user_data['selected_tags'] = []
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ", callback_data="tag:—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ"),
             InlineKeyboardButton("–º–µ–¥–∏—Ü–∏–Ω–∞", callback_data="tag:–º–µ–¥–∏—Ü–∏–Ω–∞")],
            [InlineKeyboardButton("—ç–∫–æ–ª–æ–≥–∏—è", callback_data="tag:—ç–∫–æ–ª–æ–≥–∏—è"),
             InlineKeyboardButton("–∫—É–ª—å—Ç—É—Ä–∞", callback_data="tag:–∫—É–ª—å—Ç—É—Ä–∞")],
            [InlineKeyboardButton("—Å–ø–æ—Ä—Ç", callback_data="tag:—Å–ø–æ—Ä—Ç")],
            [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done")]
        ])
        await update.message.reply_markdown("*–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–≥–∏:*", reply_markup=keyboard)
        return GUEST_TAG_SELECTION

    async def handle_tag_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data
        if data.startswith("tag:"):
            tag = data.split(":", 1)[1]
            selected = context.user_data.get('selected_tags', [])
            if tag in selected:
                selected.remove(tag)
            else:
                selected.append(tag)
            context.user_data['selected_tags'] = selected
            text = "*–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–≥–∏:*\n"
            text += "–í—ã–±—Ä–∞–Ω–æ: " + ", ".join(selected) if selected else "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ."
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ", callback_data="tag:—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ"),
                 InlineKeyboardButton("–º–µ–¥–∏—Ü–∏–Ω–∞", callback_data="tag:–º–µ–¥–∏—Ü–∏–Ω–∞")],
                [InlineKeyboardButton("—ç–∫–æ–ª–æ–≥–∏—è", callback_data="tag:—ç–∫–æ–ª–æ–≥–∏—è"),
                 InlineKeyboardButton("–∫—É–ª—å—Ç—É—Ä–∞", callback_data="tag:–∫—É–ª—å—Ç—É—Ä–∞")],
                [InlineKeyboardButton("—Å–ø–æ—Ä—Ç", callback_data="tag:—Å–ø–æ—Ä—Ç")],
                [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done")]
            ])
            await query.edit_message_text(text=text, reply_markup=keyboard, parse_mode="Markdown")
            return GUEST_TAG_SELECTION
        elif data == "done":
            user = update.effective_user
            selected = context.user_data.get('selected_tags', [])
            tags_str = ", ".join(selected)
            current_user = self.db.get_user(user.id)
            if current_user:
                self.db.save_user(
                    user.id,
                    current_user.get("first_name", ""),
                    current_user.get("last_name", ""),
                    current_user.get("email", ""),
                    current_user.get("registered_events", ""),
                    current_user.get("score", 0),
                    current_user.get("used_codes", ""),
                    current_user.get("role", "user"),
                    tags_str
                )
            await query.edit_message_text(text="*‚úÖ –¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: " + tags_str + "*", parse_mode="Markdown")
            keyboard = get_main_menu_keyboard("user")
            await query.message.reply_markdown("*üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*", reply_markup=keyboard)
            return MAIN_MENU

    async def handle_ai_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        if text == "–í—ã—Ö–æ–¥.":
            role = self.db.get_user(update.effective_user.id).get("role", "user")
            keyboard = get_main_menu_keyboard(role)
            await update.message.reply_markdown("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
            return MAIN_MENU
        else:
            from source.agents import ContextRouterAgent
            agent = ContextRouterAgent()
            response = agent.process_query(text, update.effective_user.id)
            await update.message.reply_markdown(response)
            exit_keyboard = ReplyKeyboardMarkup([["–í—ã—Ö–æ–¥."]], resize_keyboard=True)
            return AI_CHAT

    async def handle_volunteer_home(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        if text == "–í—ã—Ö–æ–¥.":
            role = self.db.get_user(update.effective_user.id).get("role", "user")
            keyboard = get_main_menu_keyboard(role)
            await update.message.reply_markdown("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
            return MAIN_MENU
        elif text == "–ü—Ä–æ—Ñ–∏–ª—å":
            await update.message.reply_markdown("*–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è:*", reply_markup=get_profile_menu_keyboard())
            return PROFILE_MENU
        else:
            await update.message.reply_markdown(f"*{text} - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.*")
            await update.message.reply_markdown("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_volunteer_home_keyboard())
            return VOLUNTEER_HOME

    async def handle_profile_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        if text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            user = self.db.get_user(update.effective_user.id)
            if user:
                profile_message = ("*–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n"
                                   f"–ò–º—è: {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                                   f"–§–∞–º–∏–ª–∏—è: {user.get('last_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                                   f"Email: {user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                                   f"–†–æ–ª—å: {user.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                                   f"–°—á—ë—Ç: {user.get('score', 0)}\n"
                                   f"–¢–µ–≥–∏: {user.get('tags', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}")
                await update.message.reply_markdown(profile_message)
            else:
                await update.message.reply_markdown("*–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*")
            await update.message.reply_markdown("*–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è:*", reply_markup=get_profile_menu_keyboard())
            return PROFILE_MENU
        elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é":
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="update:contact")],
                [InlineKeyboardButton("–¢–µ–≥–∏", callback_data="update:tags")]
            ])
            await update.message.reply_markdown("*–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:*", reply_markup=keyboard)
            return PROFILE_UPDATE_SELECTION
        elif text == "–í—ã—Ö–æ–¥":
            await update.message.reply_markdown("*–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –î–æ–º –í–æ–ª–æ–Ω—Ç–µ—Ä–∞.*", reply_markup=get_volunteer_home_keyboard())
            return VOLUNTEER_HOME
        else:
            await update.message.reply_markdown("*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.*", reply_markup=get_profile_menu_keyboard())
            return PROFILE_MENU

    async def handle_profile_update_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data
        if data == "update:contact":
            await query.edit_message_text(text="*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è, –§–∞–º–∏–ª–∏—è, Email*", parse_mode="Markdown")
            return WAIT_FOR_PROFILE_UPDATE
        elif data == "update:tags":
            user = update.effective_user
            current_user = self.db.get_user(user.id)
            if current_user and current_user.get("tags"):
                context.user_data['selected_tags'] = [tag.strip() for tag in current_user.get("tags", "").split(",") if tag.strip()]
            else:
                context.user_data['selected_tags'] = []
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ", callback_data="tag:—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ"),
                 InlineKeyboardButton("–º–µ–¥–∏—Ü–∏–Ω–∞", callback_data="tag:–º–µ–¥–∏—Ü–∏–Ω–∞")],
                [InlineKeyboardButton("—ç–∫–æ–ª–æ–≥–∏—è", callback_data="tag:—ç–∫–æ–ª–æ–≥–∏—è"),
                 InlineKeyboardButton("–∫—É–ª—å—Ç—É—Ä–∞", callback_data="tag:–∫—É–ª—å—Ç—É—Ä–∞")],
                [InlineKeyboardButton("—Å–ø–æ—Ä—Ç", callback_data="tag:—Å–ø–æ—Ä—Ç")],
                [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done_tags")]
            ])
            init_text = "*–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–≥–∏:*\n"
            init_text += "–í—ã–±—Ä–∞–Ω–æ: " + ", ".join(context.user_data['selected_tags']) if context.user_data['selected_tags'] else "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ."
            await query.edit_message_text(text=init_text, reply_markup=keyboard, parse_mode="Markdown")
            return PROFILE_TAG_SELECTION

    async def handle_contact_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        parts = [part.strip() for part in text.split(",")]
        if len(parts) != 3:
            await update.message.reply_markdown("*‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: –ò–º—è, –§–∞–º–∏–ª–∏—è, Email*")
            return WAIT_FOR_PROFILE_UPDATE
        first_name, last_name, email = parts
        user = update.effective_user
        current_user = self.db.get_user(user.id)
        if current_user:
            self.db.save_user(
                user.id,
                first_name,
                last_name,
                email,
                current_user.get("registered_events", ""),
                current_user.get("score", 0),
                current_user.get("used_codes", ""),
                current_user.get("role", "user"),
                current_user.get("tags", "")
            )
        await update.message.reply_markdown("*‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*")
        keyboard = get_main_menu_keyboard(current_user.get("role", "user"))
        await update.message.reply_markdown("*üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*", reply_markup=keyboard)
        return MAIN_MENU

    async def handle_profile_tag_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data
        selected = context.user_data.get('selected_tags', [])
        if data.startswith("tag:"):
            tag = data.split(":", 1)[1]
            if tag in selected:
                selected.remove(tag)
            else:
                selected.append(tag)
            context.user_data['selected_tags'] = selected
            text = "*–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–≥–∏:*\n"
            text += "–í—ã–±—Ä–∞–Ω–æ: " + ", ".join(selected) if selected else "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ."
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    ("‚úÖ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ" if "—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ" in selected else "—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ"),
                    callback_data="tag:—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ"
                ),
                    InlineKeyboardButton(
                        ("‚úÖ –º–µ–¥–∏—Ü–∏–Ω–∞" if "–º–µ–¥–∏—Ü–∏–Ω–∞" in selected else "–º–µ–¥–∏—Ü–∏–Ω–∞"),
                        callback_data="tag:–º–µ–¥–∏—Ü–∏–Ω–∞"
                    )],
                [InlineKeyboardButton(
                    ("‚úÖ —ç–∫–æ–ª–æ–≥–∏—è" if "—ç–∫–æ–ª–æ–≥–∏—è" in selected else "—ç–∫–æ–ª–æ–≥–∏—è"),
                    callback_data="tag:—ç–∫–æ–ª–æ–≥–∏—è"
                ),
                    InlineKeyboardButton(
                        ("‚úÖ –∫—É–ª—å—Ç—É—Ä–∞" if "–∫—É–ª—å—Ç—É—Ä–∞" in selected else "–∫—É–ª—å—Ç—É—Ä–∞"),
                        callback_data="tag:–∫—É–ª—å—Ç—É—Ä–∞"
                    )],
                [InlineKeyboardButton(
                    ("‚úÖ —Å–ø–æ—Ä—Ç" if "—Å–ø–æ—Ä—Ç" in selected else "—Å–ø–æ—Ä—Ç"),
                    callback_data="tag:—Å–ø–æ—Ä—Ç"
                )],
                [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done_tags")]
            ])
            await query.edit_message_text(text=text, reply_markup=keyboard, parse_mode="Markdown")
            return PROFILE_TAG_SELECTION
        elif data == "done_tags":
            user = update.effective_user
            selected = context.user_data.get('selected_tags', [])
            tags_str = ", ".join(selected)
            current_user = self.db.get_user(user.id)
            if current_user:
                self.db.save_user(
                    user.id,
                    current_user.get("first_name", ""),
                    current_user.get("last_name", ""),
                    current_user.get("email", ""),
                    current_user.get("registered_events", ""),
                    current_user.get("score", 0),
                    current_user.get("used_codes", ""),
                    current_user.get("role", "user"),
                    tags_str
                )
            await query.edit_message_text(text="*‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–≥–∏: " + tags_str + "*", parse_mode="Markdown")
            keyboard = get_main_menu_keyboard(current_user.get("role", "user"))
            await query.message.reply_markdown("*üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*", reply_markup=keyboard)
            return MAIN_MENU

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_markdown("*‚Ü©Ô∏è Returning to the main menu.*")
        role = self.db.get_user(update.effective_user.id).get("role", "user")
        keyboard = get_main_menu_keyboard(role)
        await update.message.reply_markdown("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)
        return MAIN_MENU

    async def load_csv(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_record = self.db.get_user(user.id)
        if not (user_record and user_record.get("role") == "admin"):
            await update.message.reply_markdown("*üö´ You do not have access to this command.*")
            return MAIN_MENU
        await update.message.reply_markdown("*üì• Please send a CSV file with data (.csv extension).*")
        return WAIT_FOR_CSV

    async def process_csv_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            file = await context.bot.get_file(update.message.document.file_id)
            data_folder = os.path.join(".", "data")
            if not os.path.exists(data_folder):
                os.makedirs(data_folder)
            temp_path = os.path.join(data_folder, update.message.document.file_name)
            await file.download_to_drive(custom_path=temp_path)
            count = 0
            with open(temp_path, newline="", encoding="utf-8") as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    name = row.get("–ü—Ä–æ–µ–∫—Ç")
                    curator = row.get("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π")
                    phone_number = row.get("–¢–µ–ª–µ—Ñ–æ–Ω")
                    email = row.get("–ü–æ—á—Ç–∞")
                    description = row.get("–°—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞")
                    tags = row.get("–¢–µ–≥–∏", "")
                    if not name:
                        continue
                    self.db.add_project(name, curator, phone_number, email, description, tags)
                    count += 1
            os.remove(temp_path)
            await update.message.reply_markdown(f"*‚úÖ CSV file processed successfully.* Projects added: _{count}_.")
        except Exception as e:
            self.logger.error(f"CSV load error: {e}")
            await update.message.reply_markdown("*üö´ An error occurred while processing the CSV.*")
        return MAIN_MENU

    async def load_events_csv(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_record = self.db.get_user(user.id)
        if not (user_record and user_record.get("role") == "admin"):
            await update.message.reply_markdown("*üö´ You do not have access to this command.*")
            return MAIN_MENU
        await update.message.reply_markdown("*üì• Please send a CSV file with event data (.csv extension).*")
        return WAIT_FOR_EVENTS_CSV

    async def process_events_csv_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            file = await context.bot.get_file(update.message.document.file_id)
            data_folder = os.path.join(".", "data")
            if not os.path.exists(data_folder):
                os.makedirs(data_folder)
            temp_path = os.path.join(data_folder, update.message.document.file_name)
            await file.download_to_drive(custom_path=temp_path)
            count = 0
            with open(temp_path, newline="", encoding="utf-8") as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    # –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–õ–æ–∫–∞—Ü–∏—è", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"
                    event_date = row.get("–î–∞—Ç–∞")
                    start_time = row.get("–í—Ä–µ–º—è")
                    creator = row.get("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä")
                    if not event_date or not start_time or not creator:
                        continue
                    name = row.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "")
                    location = row.get("–õ–æ–∫–∞—Ü–∏—è", "")
                    description = row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "")
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –≤ –ø–æ–ª–µ tags
                    tags = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}; –õ–æ–∫–∞—Ü–∏—è: {location}; –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É events, project_id –æ—Å—Ç–∞–≤–ª—è–µ–º None
                    self.db.add_event_detail(None, event_date, start_time, 0, 5, creator, tags)
                    count += 1
            os.remove(temp_path)
            await update.message.reply_markdown(f"*‚úÖ CSV file processed successfully.* Events added: _{count}_.")
        except Exception as e:
            self.logger.error(f"Events CSV load error: {e}")
            await update.message.reply_markdown("*üö´ An error occurred while processing the events CSV.*")
        return MAIN_MENU

    async def admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_record = self.db.get_user(user.id)
        if user_record and user_record.get("role") == "admin":
            await update.message.reply_markdown("*üëã Hello, admin!* Available commands:\n‚Ä¢ /load_excel - load data from Excel\n‚Ä¢ /set_admin <user_id> - assign admin\n‚Ä¢ /set_moderator <user_id> - assign moderator\n‚Ä¢ /delete_user <user_id> - delete user\n‚Ä¢ /find_user_id <user_id> - find user by id\n‚Ä¢ /find_users_name <name> - find users by name/surname\n‚Ä¢ /find_users_email <email> - find users by email\n‚Ä¢ /delete_me - delete your account\n‚Ä¢ /ai_query <query> - process query with AI agent\n‚Ä¢ /search_projects_tag <tag> - search projects by tag\n‚Ä¢ /search_projects_name <name> - search projects by name\n‚Ä¢ /search_events_tag <tag> - search events by tag\n‚Ä¢ /search_events_project <project name> - search events by project name\n‚Ä¢ /load_csv - load projects CSV\n‚Ä¢ /load_events_csv - load events CSV")
        else:
            await update.message.reply_markdown("*üö´ You do not have access to admin commands.*")

    async def load_excel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_record = self.db.get_user(user.id)
        if not (user_record and user_record.get("role") == "admin"):
            await update.message.reply_markdown("*üö´ You do not have access to this command.*")
            return
        try:
            workbook = openpyxl.load_workbook("./data/events.xlsx")
            sheet = workbook.active
            count = 0
            for row in sheet.iter_rows(min_row=2, values_only=True):
                name, date, time_value, location, curator, description, code, tags = row
                if not name:
                    continue
                self.db.add_project(name, curator, time_value, location, description, tags)
                count += 1
            await update.message.reply_markdown(f"*‚úÖ Excel file processed successfully.* Projects added: _{count}_.")
        except Exception as e:
            self.logger.error(f"Excel load error: {e}")
            await update.message.reply_markdown("*üö´ An error occurred while processing the Excel file.*")

    async def set_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_record = self.db.get_user(user.id)
        if not (user_record and user_record.get("role") == "admin"):
            await update.message.reply_markdown("*üö´ You do not have access to this command.*")
            return
        try:
            target_user_id = int(context.args[0])
            self.db.update_user_role(target_user_id, "admin")
            await update.message.reply_markdown(f"*‚úÖ User {target_user_id} has been assigned as admin.*")
        except (IndexError, ValueError):
            await update.message.reply_markdown("*‚ö†Ô∏è Usage: /set_admin <user_id>*")

    async def set_moderator(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_record = self.db.get_user(user.id)
        if not (user_record and user_record.get("role") == "admin"):
            await update.message.reply_markdown("*üö´ You do not have access to this command.*")
            return
        try:
            target_user_id = int(context.args[0])
            self.db.update_user_role(target_user_id, "moderator")
            await update.message.reply_markdown(f"*‚úÖ User {target_user_id} has been assigned as moderator.*")
        except (IndexError, ValueError):
            await update.message.reply_markdown("*‚ö†Ô∏è Usage: /set_moderator <user_id>*")

    async def delete_self(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self.db.delete_user(user.id)
        await update.message.reply_markdown("*‚úÖ Your account has been deleted.* To re-register, use /start.")

    async def admin_delete_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_record = self.db.get_user(user.id)
        if not (user_record and user_record.get("role") in ["admin", "moderator"]):
            await update.message.reply_markdown("*üö´ You do not have access to this command.*")
            return
        try:
            target_user_id = int(context.args[0])
            self.db.delete_user(target_user_id)
            await update.message.reply_markdown(f"*‚úÖ User {target_user_id} has been deleted.*")
        except (IndexError, ValueError):
            await update.message.reply_markdown("*‚ö†Ô∏è Usage: /delete_user <user_id>*")

    async def find_user_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            target_user_id = int(context.args[0])
            user = self.db.find_user_by_id(target_user_id)
            if user is None:
                await update.message.reply_markdown("*‚ùå User not found.*")
            else:
                await update.message.reply_markdown(f"*üë§ User found:*\n{user}")
        except (IndexError, ValueError):
            await update.message.reply_markdown("*‚ö†Ô∏è Usage: /find_user_id <user_id>*")

    async def find_users_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            name = " ".join(context.args)
            users = self.db.find_users_by_name(name)
            if not users:
                await update.message.reply_markdown("*‚ùå No users found.*")
            else:
                message = "*üë• Users found:*\n"
                for user in users:
                    message += f"ID: {user['id']}, Name: {user['first_name']} {user['last_name']}\n"
                await update.message.reply_markdown(message)
        except Exception:
            await update.message.reply_markdown("*üö´ Error while searching users by name.*")

    async def find_users_email(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            email = " ".join(context.args)
            users = self.db.find_users_by_email(email)
            if not users:
                await update.message.reply_markdown("*‚ùå No users found.*")
            else:
                message = "*üìß Users found:*\n"
                for user in users:
                    message += f"ID: {user['id']}, Email: {user['email']}\n"
                await update.message.reply_markdown(message)
        except Exception:
            await update.message.reply_markdown("*üö´ Error while searching users by email.*")

    async def search_projects_tag(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            tag = " ".join(context.args)
            if not tag:
                await update.message.reply_markdown("*‚ö†Ô∏è Usage: /search_projects_tag <tag>*")
                return
            projects = self.db.search_projects_by_tag(tag)
            if projects:
                message = "*Projects found by tag:*\n"
                for project in projects:
                    message += f"ID: {project['id']}, Name: {project['name']}, Tags: {project['tags']}\n"
                await update.message.reply_markdown(message)
            else:
                await update.message.reply_markdown("*No projects found for this tag.*")
        except Exception:
            await update.message.reply_markdown("*Error while searching projects by tag.*")

    async def search_projects_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            name = " ".join(context.args)
            if not name:
                await update.message.reply_markdown("*‚ö†Ô∏è Usage: /search_projects_name <project name>*")
                return
            projects = self.db.search_projects_by_name(name)
            if projects:
                message = "*Projects found by name:*\n"
                for project in projects:
                    message += f"ID: {project['id']}, Name: {project['name']}, Tags: {project['tags']}\n"
                await update.message.reply_markdown(message)
            else:
                await update.message.reply_markdown("*No projects found for this name.*")
        except Exception:
            await update.message.reply_markdown("*Error while searching projects by name.*")

    async def search_events_tag(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            tag = " ".join(context.args)
            if not tag:
                await update.message.reply_markdown("*‚ö†Ô∏è Usage: /search_events_tag <tag>*")
                return
            events = self.db.search_events_by_tag(tag)
            if events:
                message = "*Events found by tag:*\n"
                for event in events:
                    message += f"ID: {event['id']}, Project ID: {event['project_id']}, Date: {event['event_date']}, Tags: {event['tags']}\n"
                await update.message.reply_markdown(message)
            else:
                await update.message.reply_markdown("*No events found for this tag.*")
        except Exception:
            await update.message.reply_markdown("*Error while searching events by tag.*")

    async def search_events_project(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            project_name = " ".join(context.args)
            if not project_name:
                await update.message.reply_markdown("*‚ö†Ô∏è Usage: /search_events_project <project name>*")
                return
            events = self.db.search_events_by_project_name(project_name)
            if events:
                message = "*Events found for project:*\n"
                for event in events:
                    message += f"ID: {event['id']}, Date: {event['event_date']}, Start Time: {event['start_time']}, Tags: {event['tags']}\n"
                await update.message.reply_markdown(message)
            else:
                await update.message.reply_markdown("*No events found for this project name.*")
        except Exception:
            await update.message.reply_markdown("*Error while searching events by project name.*")

    async def ai_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = " ".join(context.args)
        if not query:
            await update.message.reply_markdown("*‚ö†Ô∏è Usage: /ai_query <query>*")
            return
        agent = RecommendationAgent()
        response = agent.recommend_events(update.effective_user.id)
        prompt = (
            f"Evaluate the following recommendations for the user based on their preferences:\n"
            f"{response}\nProvide a final evaluation and additional recommendations if necessary."
        )
        result = agent.process_query(prompt, update.effective_user.id)
        await update.message.reply_markdown(result)

    def run(self):
        self.logger.info("Bot is running.")
        self.application.run_polling()

if __name__ == "__main__":
    bot = VolunteerBot()
    bot.run()
